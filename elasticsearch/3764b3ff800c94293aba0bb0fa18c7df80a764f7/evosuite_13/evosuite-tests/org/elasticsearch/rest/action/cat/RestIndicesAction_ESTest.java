/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 06:53:07 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import org.apache.log4j.Logger;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.health.ClusterHealthStatus;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.rest.action.cat.RestIndicesAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.jboss.netty.util.ThreadNameDeterminer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestIndicesAction_ESTest extends RestIndicesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNull(indexNameExpressionResolver1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertNotNull(httpMethod0);
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertNotNull(defaultHttpRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertNotNull(httpMethod0);
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertEquals("_all", nettyHttpRequest0.uri());
      
      String[] stringArray0 = new String[15];
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      
      ClusterHealthResponse clusterHealthResponse0 = new ClusterHealthResponse(metaData0.GLOBAL_STATE_FILE_PREFIX, stringArray0, clusterState0);
      assertNotNull(clusterHealthResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals((-1), clusterHealthResponse0.getNumberOfPendingTasks());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertEquals((-1), clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals(ClusterHealthStatus.GREEN, clusterHealthResponse0.getStatus());
      assertEquals("global-", clusterHealthResponse0.getClusterName());
      assertEquals((-1), clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertEquals(15, stringArray0.length);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restIndicesAction0.buildTable(nettyHttpRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "\\";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("\\", stringBuilder0.toString());
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("\\", stringBuilder0.toString());
      assertEquals("\\", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder0.deleteCharAt(int0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder2.toString());
      
      restIndicesAction0.documentation(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      
      restIndicesAction0.documentation(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNotNull(indexNameExpressionResolver1);
      assertSame(indexNameExpressionResolver0, indexNameExpressionResolver1);
      assertSame(indexNameExpressionResolver1, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "u{)oUN\"k";
      String string1 = "";
      Logger logger0 = Logger.getLogger(string1);
      assertNotNull(logger0);
      assertNotSame(string1, string0);
      assertFalse(logger0.isDebugEnabled());
      assertEquals("", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(string1.equals((Object)string0));
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertNotNull(eSLogger0);
      assertFalse(logger0.isDebugEnabled());
      assertEquals("", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("u{)oUN\"k", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("", eSLogger0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertNotNull(metaData1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertFalse(logger0.isDebugEnabled());
      assertEquals("", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("u{)oUN\"k", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("", eSLogger0.getName());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Settings settings0 = metaData1.settings();
      assertNotNull(settings0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertFalse(logger0.isDebugEnabled());
      assertEquals("", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("u{)oUN\"k", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("", eSLogger0.getName());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertFalse(logger0.isDebugEnabled());
      assertEquals("", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("u{)oUN\"k", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("", eSLogger0.getName());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertFalse(logger0.isDebugEnabled());
      assertEquals("", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("u{)oUN\"k", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("", eSLogger0.getName());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNull(indexNameExpressionResolver1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertFalse(logger0.isDebugEnabled());
      assertEquals("", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("u{)oUN\"k", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("", eSLogger0.getName());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      Settings settings0 = indexMetaData0.getSettings();
      assertNotNull(settings0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "8={";
      Logger logger0 = null;
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertNotNull(eSLogger0);
      assertEquals("8={", eSLogger0.getPrefix());
      
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertNotNull(metaData1);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("8={", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      
      Settings settings0 = metaData1.persistentSettings();
      assertNotNull(settings0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("8={", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals("8={", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("8={", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals("8={", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      Class<SortedSetDVBytesAtomicFieldData> class0 = SortedSetDVBytesAtomicFieldData.class;
      Logger logger0 = Logger.getLogger(class0);
      assertNotNull(logger0);
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertNotNull(eSLogger0);
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", eSLogger0.getName());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertNotNull(metaData1);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", eSLogger0.getName());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      
      Settings settings0 = metaData1.settings();
      assertNotNull(settings0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", eSLogger0.getName());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      
      RestController restController0 = null;
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("org.elasticsearch.index.fielddata.plain.SortedSetDVBytesAtomicFieldData", eSLogger0.getName());
      assertNull(eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      
      RestIndicesAction restIndicesAction0 = null;
      try {
        restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "";
      boolean boolean0 = true;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertNotNull(httpMethod0);
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("PUT", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("_all", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertEquals("_all", nettyHttpRequest0.uri());
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "";
      boolean boolean0 = true;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertNotNull(httpMethod0);
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      char char0 = '{';
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = metaData0.ALL;
      stringArray0[2] = metaData0.ALL;
      stringArray0[3] = metaData0.CONTEXT_MODE_PARAM;
      stringArray0[4] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      stringArray0[5] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      stringArray0[6] = metaData0.CONTEXT_MODE_PARAM;
      stringArray0[7] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[8] = metaData0.CONTEXT_MODE_GATEWAY;
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      ClusterHealthResponse clusterHealthResponse0 = new ClusterHealthResponse(metaData0.GLOBAL_STATE_FILE_PREFIX, stringArray0, clusterState0);
      assertNotNull(clusterHealthResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(ClusterHealthStatus.GREEN, clusterHealthResponse0.getStatus());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals((-1), clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals("global-", clusterHealthResponse0.getClusterName());
      assertEquals((-1), clusterHealthResponse0.getNumberOfPendingTasks());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals((-1), clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals(9, stringArray0.length);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restIndicesAction0.buildTable(nettyHttpRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "\\";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("\\", stringBuilder0.toString());
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(int0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.documentation(stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }
}
