/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 06:59:36 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.ObjectObjectIdentityHashMap;
import com.carrotsearch.hppc.ObjectObjectMap;
import org.apache.lucene.util.CharsRef;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.node.NodeClient;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.block.ClusterBlocks;
import org.elasticsearch.cluster.health.ClusterHealthStatus;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.node.DiscoveryNodes;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.cluster.routing.RoutingTable;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.index.fielddata.IndexFieldDataService;
import org.elasticsearch.index.mapper.MapperService;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.rest.action.cat.RestIndicesAction;
import org.elasticsearch.search.lookup.SearchLookup;
import org.elasticsearch.search.lookup.SourceLookup;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestIndicesAction_ESTest extends RestIndicesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNotNull(indexNameExpressionResolver1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertSame(indexNameExpressionResolver0, indexNameExpressionResolver1);
      assertSame(indexNameExpressionResolver1, indexNameExpressionResolver0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.DELETE;
      assertNotNull(httpMethod0);
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      
      String string0 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      
      String[] stringArray0 = new String[0];
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      
      ClusterHealthResponse clusterHealthResponse0 = new ClusterHealthResponse(string0, stringArray0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterHealthResponse0);
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals((-1), clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals((-1), clusterHealthResponse0.getNumberOfPendingTasks());
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals((-1), clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(ClusterHealthStatus.GREEN, clusterHealthResponse0.getStatus());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertEquals("", clusterHealthResponse0.getClusterName());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertEquals(0, stringArray0.length);
      
      IndicesStatsResponse indicesStatsResponse0 = null;
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      
      MetaData metaData0 = routingNodes0.metaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      
      // Undeclared exception!
      restIndicesAction0.buildTable(nettyHttpRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.persistentSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      ThreadPool threadPool0 = new ThreadPool(metaData0.CONTEXT_MODE_SNAPSHOT);
      assertNotNull(threadPool0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[0];
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(0, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNotNull(sourceLookup0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertNotNull(nodeClient0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, nodeClient0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      
      HttpMethod httpMethod0 = new HttpMethod(metaData0.ALL);
      assertNotNull(httpMethod0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertNotNull(nettyHttpRequest0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, nodeClient0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      Settings settings0 = indexMetaData0.getSettings();
      assertNotNull(settings0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      
      HttpMethod httpMethod0 = HttpMethod.HEAD;
      assertNotNull(httpMethod0);
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      
      String string0 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.uri());
      
      String[] stringArray0 = new String[0];
      String string1 = "9{bg%hGaHqX_KK1V";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      ClusterHealthResponse clusterHealthResponse0 = new ClusterHealthResponse(string1, stringArray0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(clusterHealthResponse0);
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals((-1), clusterHealthResponse0.getNumberOfPendingTasks());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals("9{bg%hGaHqX_KK1V", clusterHealthResponse0.getClusterName());
      assertEquals((-1), clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertEquals((-1), clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertEquals(ClusterHealthStatus.GREEN, clusterHealthResponse0.getStatus());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0, stringArray0.length);
      
      IndicesStatsResponse indicesStatsResponse0 = null;
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      MetaData metaData0 = routingNodes0.metaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      // Undeclared exception!
      restIndicesAction0.buildTable(nettyHttpRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      long long0 = 0L;
      String string0 = "6d";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(clusterState1);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals("6d", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      
      RoutingNodes routingNodes0 = clusterState1.getRoutingNodes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(routingNodes0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals("6d", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      
      MetaData metaData0 = routingNodes0.metaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(metaData0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals("6d", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(settings0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals("6d", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(restController0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals("6d", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(indexNameExpressionResolver0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals("6d", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(restIndicesAction0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals("6d", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestRequest restRequest0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[1] = metaData0.ALL;
      String string1 = "v#Zrfx&=*r~Z#N-mA";
      int int0 = 2390;
      int int1 = 3154575;
      int int2 = 512;
      TimeValue timeValue0 = null;
      ClusterHealthResponse clusterHealthResponse0 = new ClusterHealthResponse(string1, stringArray0, clusterState0, int0, int1, int2, timeValue0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(clusterHealthResponse0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(512, clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(2390, clusterHealthResponse0.getNumberOfPendingTasks());
      assertEquals(ClusterHealthStatus.GREEN, clusterHealthResponse0.getStatus());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(3154575, clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertEquals("v#Zrfx&=*r~Z#N-mA", clusterHealthResponse0.getClusterName());
      assertEquals(2, stringArray0.length);
      
      ClusterHealthStatus clusterHealthStatus0 = ClusterHealthStatus.RED;
      clusterHealthResponse0.setStatus(clusterHealthStatus0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(512, clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(2390, clusterHealthResponse0.getNumberOfPendingTasks());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(3154575, clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals(ClusterHealthStatus.RED, clusterHealthResponse0.getStatus());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertEquals("v#Zrfx&=*r~Z#N-mA", clusterHealthResponse0.getClusterName());
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(string1, string0);
      assertEquals(2, stringArray0.length);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restIndicesAction0.buildTable(restRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = null;
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = null;
      try {
        restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNotNull(indexNameExpressionResolver1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertSame(indexNameExpressionResolver0, indexNameExpressionResolver1);
      assertSame(indexNameExpressionResolver1, indexNameExpressionResolver0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restController0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restIndicesAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertNotNull(httpMethod0);
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      
      String string0 = "AZ&+";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("AZ&+", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("AZ&+", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("AZ&+", nettyHttpRequest0.rawPath());
      assertEquals("AZ&+", nettyHttpRequest0.uri());
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      MetaData.API_AND_GATEWAY = metaData0.API_AND_GATEWAY;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(2, MetaData.API_AND_GATEWAY.size());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      
      int int0 = 0;
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(int0);
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder2);
      assertEquals("", stringBuilder0.toString());
      assertEquals("\u0000", stringBuilder1.toString());
      assertEquals("\u0000", stringBuilder2.toString());
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((Object) stringBuilder1);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder3.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder3);
      assertEquals("", stringBuilder0.toString());
      assertEquals("\u0000\u0000", stringBuilder1.toString());
      assertEquals("\u0000\u0000", stringBuilder2.toString());
      assertEquals("\u0000\u0000", stringBuilder3.toString());
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      
      int int1 = (-199);
      String string0 = "org.apache.log4j.AsyncAppender";
      StringBuilder stringBuilder4 = stringBuilder2.insert(int0, (Object) string0);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(int0 == int1);
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder4.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder4);
      assertEquals("", stringBuilder0.toString());
      assertEquals("org.apache.log4j.AsyncAppender\u0000\u0000", stringBuilder1.toString());
      assertEquals("org.apache.log4j.AsyncAppender\u0000\u0000", stringBuilder2.toString());
      assertEquals("org.apache.log4j.AsyncAppender\u0000\u0000", stringBuilder4.toString());
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder4);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder1);
      assertNotSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      
      restIndicesAction0.documentation(stringBuilder4);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder4));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(int0 == int1);
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder4.equals((Object)stringBuilder0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("", stringBuilder0.toString());
      assertEquals("org.apache.log4j.AsyncAppender\u0000\u0000/_cat/indices\n/_cat/indices/{index}\n", stringBuilder1.toString());
      assertEquals("org.apache.log4j.AsyncAppender\u0000\u0000/_cat/indices\n/_cat/indices/{index}\n", stringBuilder2.toString());
      assertEquals("org.apache.log4j.AsyncAppender\u0000\u0000/_cat/indices\n/_cat/indices/{index}\n", stringBuilder4.toString());
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder4);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder1);
      assertNotSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      Settings settings0 = indexMetaData0.getSettings();
      assertNotNull(settings0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertFalse(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      RestController restController0 = new RestController(settings0);
      assertFalse(settings0.equals((Object)settings1));
      assertNotNull(restController0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertNotNull(restIndicesAction0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertNull(indexNameExpressionResolver1);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = (-663);
      Random.setNextRandom(int0);
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      RestController restController0 = new RestController(settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(restController0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      ThreadPool threadPool0 = new ThreadPool(metaData0.CONTEXT_MODE_SNAPSHOT);
      assertNotNull(threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[0];
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(0, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNotNull(sourceLookup0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(nodeClient0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      Client client0 = nodeClient0.filterWithHeader(sourceLookup0);
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(client0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNull(sourceLookup0.sourceContentType());
      assertNotSame(settings0, settings1);
      assertEquals(0, stringArray0.length);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restIndicesAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      
      HttpMethod httpMethod0 = new HttpMethod(metaData0.ALL);
      assertNotNull(httpMethod0);
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(663, (int)localChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(663, (int)localChannel0.getId());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(663, (int)localChannel0.getId());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, nodeClient0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }
}
