/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 06:42:01 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.Map;
import java.util.concurrent.ForkJoinPool;
import org.apache.log4j.Logger;
import org.apache.lucene.util.CharsRef;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestIndicesAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestIndicesAction_ESTest extends RestIndicesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      
      Channel channel0 = null;
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean0 = true;
      HttpMethod httpMethod0 = HttpMethod.OPTIONS;
      assertNotNull(httpMethod0);
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_SNAPSHOT);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = null;
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = null;
      try {
        restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      assertTrue(settings1.equals((Object)settings0));
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertTrue(settings0.equals((Object)settings1));
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      char[] charArray0 = new char[5];
      char char0 = '\"';
      charArray0[0] = char0;
      char char1 = '+';
      charArray0[1] = char1;
      char char2 = 'h';
      charArray0[2] = char2;
      char char3 = 'F';
      charArray0[3] = char3;
      char char4 = 'R';
      charArray0[4] = char4;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(stringBuilder1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\"', '+', 'h', 'F', 'R'}, charArray0);
      assertEquals("\"+hFR", stringBuilder1.toString());
      assertEquals("\"+hFR", stringBuilder0.toString());
      
      restIndicesAction0.documentation(stringBuilder0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertSame(stringBuilder0, stringBuilder1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("\"+hFR/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Map<String, Object> map0 = settings0.getAsStructuredMap();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "org.elasticsearch.index.cache.request.RequestCacheStats";
      int int0 = 258;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertNotNull(httpVersion0);
      assertEquals(258, httpVersion0.getMinorVersion());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS", httpVersion0.getProtocolName());
      assertEquals(258, httpVersion0.getMajorVersion());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS/258.258", httpVersion0.toString());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS/258.258", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertNotNull(httpMethod0);
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      
      String string1 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
      assertNotNull(defaultHttpRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(258, httpVersion0.getMinorVersion());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS", httpVersion0.getProtocolName());
      assertEquals(258, httpVersion0.getMajorVersion());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS/258.258", httpVersion0.toString());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS/258.258", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      String string2 = defaultChannelPipeline0.toString();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultChannelPipeline{}", string2);
      assertTrue(defaultChannelPipeline0.isAttached());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(258, httpVersion0.getMinorVersion());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS", httpVersion0.getProtocolName());
      assertEquals(258, httpVersion0.getMajorVersion());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS/258.258", httpVersion0.toString());
      assertEquals("ORG.ELASTICSEARCH.INDEX.CACHE.REQUEST.REQUESTCACHESTATS/258.258", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.persistentSettings();
      assertNotNull(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.valueOf(metaData0.CONTEXT_MODE_SNAPSHOT);
      assertNotNull(httpMethod0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("SNAPSHOT", httpMethod0.toString());
      assertEquals("SNAPSHOT", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_SNAPSHOT);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("SNAPSHOT", httpMethod0.toString());
      assertEquals("SNAPSHOT", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("SNAPSHOT", httpMethod0.toString());
      assertEquals("SNAPSHOT", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("SNAPSHOT", httpMethod0.toString());
      assertEquals("SNAPSHOT", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      String string0 = "percolate.memory_size";
      Logger logger0 = Logger.getRootLogger();
      assertNotNull(logger0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertNotNull(eSLogger0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("percolate.memory_size", eSLogger0.getPrefix());
      
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(metaData1);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("percolate.memory_size", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      
      Settings settings0 = metaData1.settings();
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(settings0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("percolate.memory_size", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("percolate.memory_size", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("percolate.memory_size", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings1);
      assertNotNull(indexNameExpressionResolver0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("percolate.memory_size", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("percolate.memory_size", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }
}
