/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 07:28:41 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.ObjectObjectMap;
import com.carrotsearch.hppc.ObjectObjectScatterMap;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ForkJoinPool;
import org.apache.log4j.helpers.LogLog;
import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.node.NodeClient;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.block.ClusterBlock;
import org.elasticsearch.cluster.block.ClusterBlockLevel;
import org.elasticsearch.cluster.block.ClusterBlocks;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.node.DiscoveryNodes;
import org.elasticsearch.cluster.routing.RoutingTable;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.index.fielddata.IndexFieldDataService;
import org.elasticsearch.index.mapper.MapperService;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestFilter;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestShardsAction;
import org.elasticsearch.search.lookup.SearchLookup;
import org.elasticsearch.search.lookup.SourceLookup;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.TruncatedChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFactory;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestShardsAction_ESTest extends RestShardsAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder(indexMetaData0.SETTING_READ_ONLY);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("index.blocks.read_only", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("index.blocks.read_only/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      ClusterBlockLevel clusterBlockLevel0 = ClusterBlockLevel.METADATA_READ;
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      RestRequest restRequest0 = null;
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      Table table0 = restShardsAction0.buildTable(restRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Client client0 = null;
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestController restController0 = new RestController(settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      ClusterName clusterName0 = new ClusterName(metaData0.CONTEXT_MODE_PARAM);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("context_mode", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long0 = (-2L);
      RoutingTable routingTable0 = RoutingTable.EMPTY_ROUTING_TABLE;
      assertEquals(0L, routingTable0.version());
      assertNotNull(routingTable0);
      
      DiscoveryNodes discoveryNodes0 = DiscoveryNodes.PROTO;
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.localNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertNull(discoveryNodes0.masterNodeId());
      assertFalse(discoveryNodes0.valid());
      assertNotNull(discoveryNodes0);
      
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap0 = null;
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("context_mode", clusterName0.value());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      Table table0 = restShardsAction0.buildTable(restRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("context_mode", clusterName0.value());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      ThreadPool threadPool0 = new ThreadPool(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[28];
      stringArray0[0] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertEquals(28, stringArray0.length);
      assertNotNull(searchLookup0);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(28, stringArray0.length);
      assertNotNull(sourceLookup0);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(28, stringArray0.length);
      assertNotNull(nodeClient0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, nodeClient0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(28, stringArray0.length);
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = new HttpMethod(metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("GATEWAY", httpMethod0.getName());
      assertEquals("GATEWAY", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, stringArray0[0]);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("GATEWAY", httpMethod0.getName());
      assertEquals("GATEWAY", httpMethod0.toString());
      assertEquals("global-", defaultHttpRequest0.getUri());
      assertEquals(28, stringArray0.length);
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("global-", nettyHttpRequest0.rawPath());
      assertEquals("global-", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("GATEWAY", httpMethod0.getName());
      assertEquals("GATEWAY", httpMethod0.toString());
      assertEquals("global-", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals(28, stringArray0.length);
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(networkService0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("GATEWAY", httpMethod0.getName());
      assertEquals("GATEWAY", httpMethod0.toString());
      assertEquals("global-", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("global-", nettyHttpRequest0.rawPath());
      assertEquals("global-", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(28, stringArray0.length);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, nodeClient0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.DELETE;
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string0 = "*BfSU_U@]]`'gRV";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("*BfSU_U@]]`'gRV", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("*BfSU_U@]]`'gRV", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("*BfSU_U@]]`'gRV", nettyHttpRequest0.uri());
      assertEquals("*BfSU_U@]]`'gRV", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("*BfSU_U@]]`'gRV", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("*BfSU_U@]]`'gRV", nettyHttpRequest0.uri());
      assertEquals("*BfSU_U@]]`'gRV", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestController restController1 = restController0.start();
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.STARTED, restController1.lifecycleState());
      assertNotNull(restController1);
      
      Client client0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = metaData0.CONTEXT_MODE_GATEWAY;
      String[] stringArray1 = settings0.getAsArray(metaData0.CONTEXT_MODE_GATEWAY, stringArray0);
      assertNotSame(settings0, settings1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      Table table0 = restShardsAction0.getTableWithHeader(restRequest0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertSame(restController0, restController1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertNotNull(table0);
      
      // Undeclared exception!
      restShardsAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertNotNull(settings1);
      
      RestController restController0 = null;
      Client client0 = null;
      RestShardsAction restShardsAction0 = null;
      try {
        restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(indexMetaData0);
      
      Settings settings1 = indexMetaData0.getSettings();
      assertNotSame(settings1, settings0);
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest.Method restRequest_Method0 = RestRequest.Method.HEAD;
      restController0.registerHandler(restRequest_Method0, indexMetaData0.SETTING_VERSION_MINIMUM_COMPATIBLE, restShardsAction0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder(indexMetaData0.SETTING_CREATION_DATE);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("index.creation_date", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = (-953);
      StringBuilder stringBuilder1 = stringBuilder0.append(int0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("index.creation_date-953", stringBuilder0.toString());
      assertEquals("index.creation_date-953", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((CharSequence) stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("index.creation_date-953index.creation_date-953", stringBuilder0.toString());
      assertEquals("index.creation_date-953index.creation_date-953", stringBuilder1.toString());
      assertEquals("index.creation_date-953index.creation_date-953", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      char char0 = 'f';
      StringBuilder stringBuilder3 = stringBuilder1.append(char0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("index.creation_date-953index.creation_date-953f", stringBuilder0.toString());
      assertEquals("index.creation_date-953index.creation_date-953f", stringBuilder1.toString());
      assertEquals("index.creation_date-953index.creation_date-953f", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      restShardsAction0.documentation(stringBuilder3);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("index.creation_date-953index.creation_date-953f/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertEquals("index.creation_date-953index.creation_date-953f/_cat/shards\n/_cat/shards/{index}\n", stringBuilder1.toString());
      assertEquals("index.creation_date-953index.creation_date-953f/_cat/shards\n/_cat/shards/{index}\n", stringBuilder3.toString());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.DELETE;
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string0 = "Y89)8[=<&PoB_l&T";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("Y89)8[=<&PoB_l&T", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(channelSink0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertNotNull(socketChannel0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      NioWorker nioWorker0 = new NioWorker(forkJoinPool0);
      assertNotNull(nioWorker0);
      
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(nioSocketChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("Y89)8[=<&PoB_l&T", nettyHttpRequest0.rawPath());
      assertEquals("Y89)8[=<&PoB_l&T", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("Y89)8[=<&PoB_l&T", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(nettyHttpRequest0);
      
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("Y89)8[=<&PoB_l&T", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("Y89)8[=<&PoB_l&T", nettyHttpRequest0.rawPath());
      assertEquals("Y89)8[=<&PoB_l&T", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(restRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = "";
      RestFilter restFilter0 = mock(RestFilter.class, new ViolatedAssumptionAnswer());
      restController0.registerFilter(restFilter0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      restShardsAction0.documentation(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder1.toString());
      
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(indexMetaData0.SETTING_BLOCKS_READ, int0, int0, boolean0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("INDEX.BLOCKS.READ/0.0", httpVersion0.toString());
      assertEquals("INDEX.BLOCKS.READ/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("INDEX.BLOCKS.READ", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.OPTIONS;
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_UPGRADED);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("INDEX.BLOCKS.READ/0.0", httpVersion0.toString());
      assertEquals("INDEX.BLOCKS.READ/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("INDEX.BLOCKS.READ", httpVersion0.getProtocolName());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("index.version.upgraded", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertNotNull(localChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("index.version.upgraded", nettyHttpRequest0.uri());
      assertEquals("index.version.upgraded", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("INDEX.BLOCKS.READ/0.0", httpVersion0.toString());
      assertEquals("INDEX.BLOCKS.READ/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("INDEX.BLOCKS.READ", httpVersion0.getProtocolName());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("index.version.upgraded", defaultHttpRequest0.getUri());
      assertNotNull(nettyHttpRequest0);
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string0 = "u*5Gn;uWtqH";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("u*5Gn;uWtqH", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("u*5Gn;uWtqH", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("u*5Gn;uWtqH", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("u*5Gn;uWtqH", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.DELETE;
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("DELETE", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "Rt,a24ZSfrBO5r#/\\n";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("Rt,a24ZSfrBO5r#/\\n", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertNotNull(localChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("Rt,a24ZSfrBO5r#/\\n", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertEquals("Rt,a24ZSfrBO5r#/\\n", nettyHttpRequest0.rawPath());
      assertEquals("Rt,a24ZSfrBO5r#/\\n", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertNotNull(nettyHttpRequest0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      long long0 = 604800L;
      System.setCurrentTimeMillis(long0);
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      int int0 = 0;
      Random.setNextRandom(int0);
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long2 = 1017L;
      String string0 = "";
      String string1 = "";
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      RoutingTable routingTable0 = RoutingTable.EMPTY_ROUTING_TABLE;
      assertEquals(0L, routingTable0.version());
      assertNotNull(routingTable0);
      
      DiscoveryNodes discoveryNodes0 = DiscoveryNodes.EMPTY_NODES;
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.valid());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertNotNull(discoveryNodes0);
      
      ClusterBlocks clusterBlocks0 = ClusterBlocks.PROTO;
      assertNotNull(clusterBlocks0);
      
      ObjectObjectScatterMap<String, ClusterState.Custom> objectObjectScatterMap0 = new ObjectObjectScatterMap<String, ClusterState.Custom>(int0);
      assertNotNull(objectObjectScatterMap0);
      
      ClusterBlockLevel clusterBlockLevel0 = ClusterBlockLevel.WRITE;
      ImmutableOpenMap<String, Set<ClusterBlock>> immutableOpenMap0 = clusterBlocks0.indices(clusterBlockLevel0);
      assertNotNull(immutableOpenMap0);
      
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap1 = ImmutableOpenMap.copyOf((ObjectObjectMap<String, ClusterState.Custom>) objectObjectScatterMap0);
      assertNotNull(immutableOpenMap1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = true;
      ClusterState clusterState0 = new ClusterState(clusterName0, int0, string1, metaData0, routingTable0, discoveryNodes0, clusterBlocks0, immutableOpenMap1, boolean0);
      assertEquals(0L, routingTable0.version());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.valid());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long2, string0, clusterState0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(0L, routingTable0.version());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.valid());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1017L, clusterState1.version());
      assertEquals(1017L, clusterState1.getVersion());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState1);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(0L, routingTable0.version());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.valid());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1017L, clusterState1.version());
      assertEquals(1017L, clusterState1.getVersion());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(restRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.valid());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1017L, clusterState1.version());
      assertEquals(1017L, clusterState1.getVersion());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      long long0 = 604800L;
      System.setCurrentTimeMillis(long0);
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      int int0 = 0;
      Random.setNextRandom(int0);
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long2 = 1017L;
      String string0 = "";
      String string1 = "";
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      boolean boolean0 = false;
      LogLog.setInternalDebugging(boolean0);
      RoutingTable routingTable0 = RoutingTable.EMPTY_ROUTING_TABLE;
      assertEquals(0L, routingTable0.version());
      assertNotNull(routingTable0);
      
      DiscoveryNodes discoveryNodes0 = DiscoveryNodes.EMPTY_NODES;
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNotNull(discoveryNodes0);
      
      ClusterBlocks clusterBlocks0 = ClusterBlocks.PROTO;
      assertNotNull(clusterBlocks0);
      
      Map<String, String> map0 = settings0.getAsMap();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      ObjectObjectScatterMap<String, ClusterState.Custom> objectObjectScatterMap0 = new ObjectObjectScatterMap<String, ClusterState.Custom>(int0);
      assertNotNull(objectObjectScatterMap0);
      
      ClusterBlockLevel clusterBlockLevel0 = ClusterBlockLevel.WRITE;
      ImmutableOpenMap<String, Set<ClusterBlock>> immutableOpenMap0 = clusterBlocks0.indices(clusterBlockLevel0);
      assertNotNull(immutableOpenMap0);
      
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap1 = ImmutableOpenMap.copyOf((ObjectObjectMap<String, ClusterState.Custom>) objectObjectScatterMap0);
      assertNotNull(immutableOpenMap1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = true;
      ClusterState clusterState0 = new ClusterState(clusterName0, int0, string1, metaData0, routingTable0, discoveryNodes0, clusterBlocks0, immutableOpenMap1, boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long2, string0, clusterState0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1017L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(1017L, clusterState1.getVersion());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState1);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1017L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(1017L, clusterState1.getVersion());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(restRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.masterNodeId());
      assertNull(discoveryNodes0.localNodeId());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1017L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(1017L, clusterState1.getVersion());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      
      IndicesStatsResponse indicesStatsResponse1 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restShardsAction0.buildTable(restRequest0, clusterStateResponse0, indicesStatsResponse1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "ou3z4T2l.o-}!fi ";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      long long0 = (-1433L);
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      ThreadPool threadPool0 = new ThreadPool(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(searchLookup0);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(sourceLookup0);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(nodeClient0);
      
      Client client0 = nodeClient0.filterWithHeader(sourceLookup0);
      assertNotSame(settings0, settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(client0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertNotNull(httpVersion0);
      
      String string1 = "#rzId\"t\"iy!E";
      HttpMethod httpMethod0 = new HttpMethod(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string2 = "DOUBLE_ARRAY";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertEquals("DOUBLE_ARRAY", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertEquals("DOUBLE_ARRAY", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(networkService0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings1, threadPool0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      boolean boolean1 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertEquals("DOUBLE_ARRAY", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "ou3z4T2l.o-}!fi ";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(settings0);
      
      Settings settings1 = Settings.EMPTY;
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      ThreadPool threadPool0 = new ThreadPool(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(searchLookup0);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(sourceLookup0);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(nodeClient0);
      
      Client client0 = nodeClient0.filterWithHeader(sourceLookup0);
      assertNotSame(settings0, settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(client0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(1, stringArray0.length);
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      String string1 = "#rzId\"t\"iy!E";
      HttpMethod httpMethod0 = new HttpMethod(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string2 = "DOUBLE_ARRAY";
      threadPool0.close();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertEquals("DOUBLE_ARRAY", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertEquals("DOUBLE_ARRAY", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.rawPath());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(networkService0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings1, threadPool0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      boolean boolean1 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.toString());
      assertEquals("#rzId\"t\"iy!E", httpMethod0.getName());
      assertEquals("DOUBLE_ARRAY", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.rawPath());
      assertEquals("DOUBLE_ARRAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // threadcontext is already closed
         //
         verifyException("org.elasticsearch.common.util.concurrent.ThreadContext$ContextThreadLocal", e);
      }
  }
}
