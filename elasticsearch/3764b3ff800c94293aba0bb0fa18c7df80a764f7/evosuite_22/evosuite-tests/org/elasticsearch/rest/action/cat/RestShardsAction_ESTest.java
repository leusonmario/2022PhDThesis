/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 07:37:10 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.Map;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.LoggerRepository;
import org.elasticsearch.Version;
import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.action.admin.indices.upgrade.post.UpgradeRequest;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestFilter;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestShardsAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestShardsAction_ESTest extends RestShardsAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      
      MetaData metaData0 = routingNodes0.metaData();
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      int int0 = 95;
      boolean boolean0 = true;
      HttpVersion httpVersion0 = new HttpVersion(metaData0.CONTEXT_MODE_SNAPSHOT, int0, int0, boolean0);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("SNAPSHOT", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("SNAPSHOT/95.95", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("SNAPSHOT/95.95", httpVersion0.toString());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.HEAD;
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("SNAPSHOT", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("SNAPSHOT/95.95", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("SNAPSHOT/95.95", httpVersion0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(7, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("SNAPSHOT", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("SNAPSHOT/95.95", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("SNAPSHOT/95.95", httpVersion0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(7, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nettyHttpRequest0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("SNAPSHOT", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("SNAPSHOT/95.95", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("SNAPSHOT/95.95", httpVersion0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(7, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      
      MetaData metaData0 = routingNodes0.metaData();
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restShardsAction0);
      
      int int0 = 95;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(clusterState0.UNKNOWN_UUID, int0, int0, boolean0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("_NA_/95.95", httpVersion0.getText());
      assertEquals("_NA_/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("_NA_", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.HEAD;
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("_NA_/95.95", httpVersion0.getText());
      assertEquals("_NA_/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("_NA_", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("_NA_/95.95", httpVersion0.getText());
      assertEquals("_NA_/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("_NA_", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nettyHttpRequest0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterName0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("_NA_/95.95", httpVersion0.getText());
      assertEquals("_NA_/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("_NA_", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(networkService0);
      
      String string0 = "kd=MP8Hbig0";
      ThreadPool threadPool0 = new ThreadPool(string0);
      assertNotNull(threadPool0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(bigArrays0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(nettyHttpServerTransport0);
      
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(clusterState0.UNKNOWN_UUID, bigArrays0.INT_PAGE_SIZE);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals("_na_", inetSocketAddress0.getHostString());
      assertEquals(4096, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("_na_:4096", inetSocketAddress0.toString());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(inetSocketAddress0);
      
      OrderedUpstreamMessageEvent orderedUpstreamMessageEvent0 = new OrderedUpstreamMessageEvent(bigArrays0.OBJECT_PAGE_SIZE, localServerChannel0, clusterStateResponse0, inetSocketAddress0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals("_na_", inetSocketAddress0.getHostString());
      assertEquals(4096, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("_na_:4096", inetSocketAddress0.toString());
      assertEquals(2048, orderedUpstreamMessageEvent0.getSequence());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(orderedUpstreamMessageEvent0);
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, orderedUpstreamMessageEvent0, boolean0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals("_NA_/95.95", httpVersion0.getText());
      assertEquals("_NA_/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("_NA_", httpVersion0.getProtocolName());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals("_na_", inetSocketAddress0.getHostString());
      assertEquals(4096, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("_na_:4096", inetSocketAddress0.toString());
      assertEquals(2048, orderedUpstreamMessageEvent0.getSequence());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      int int0 = 902;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restShardsAction0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = null;
      Client client0 = null;
      RestShardsAction restShardsAction0 = null;
      try {
        restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "indexing.index_total";
      Logger logger0 = Logger.getRootLogger();
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("indexing.index_total", eSLogger0.getPrefix());
      assertNotNull(eSLogger0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("indexing.index_total", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(metaData1);
      
      Settings settings0 = metaData1.transientSettings();
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("indexing.index_total", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("indexing.index_total", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("indexing.index_total", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("indexing.index_total", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restShardsAction0);
      
      int int0 = 902;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("indexing.index_total", eSLogger0.getPrefix());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      long long0 = (-3372L);
      System.setCurrentTimeMillis(long0);
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      Table table0 = restShardsAction0.getTableWithHeader(restRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = (-651L);
      System.setCurrentTimeMillis(long0);
      int int0 = (-1908);
      Random.setNextRandom(int0);
      Random.setNextRandom(int0);
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.buildTable(restRequest0, clusterStateResponse0, indicesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestFilter restFilter0 = null;
      Map<String, String> map0 = settings0.getAsMap();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      restController0.registerFilter(restFilter0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      RestRequest restRequest0 = null;
      ClusterStateResponse clusterStateResponse0 = null;
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      LoggerRepository loggerRepository0 = LogManager.getLoggerRepository();
      assertNotNull(loggerRepository0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.buildTable(restRequest0, clusterStateResponse0, indicesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      
      MetaData metaData0 = routingNodes0.metaData();
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restShardsAction0);
      
      String string0 = "(p\"AA{";
      int int0 = 95;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertEquals(95, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.HEAD;
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(2, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      assertEquals(1, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(2, (int)localServerChannel0.getId());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nettyHttpRequest0);
      assertEquals(1, (int)localServerChannel0.getId());
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterName0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(2, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      assertEquals(1, (int)localServerChannel0.getId());
      
      ClusterStateResponse clusterStateResponse1 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(clusterStateResponse1.equals((Object)clusterStateResponse0));
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse1);
      
      IndicesStatsResponse indicesStatsResponse1 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse1, indicesStatsResponse1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      String string0 = "";
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Version version0 = indexMetaData0.getCreationVersion();
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(5000099, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertNotNull(version0);
      
      Version version1 = settings0.getAsVersion(string0, version0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version1.isAlpha());
      assertFalse(version1.isRC());
      assertFalse(version1.isBeta());
      assertNotSame(settings0, settings1);
      assertSame(version0, version1);
      assertSame(version1, version0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(5000099, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version1.minor);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000099, version1.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version1.major);
      assertEquals((byte)0, version1.revision);
      assertEquals((byte)99, version1.build);
      assertNotNull(version1);
      
      RestController restController0 = new RestController(settings1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_CREATED_STRING);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("index.version.created_string", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("index.version.created_string", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("index.version.created_string", nettyHttpRequest0.rawPath());
      assertEquals("index.version.created_string", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      String string1 = ".N.p$A";
      ThreadPool threadPool0 = new ThreadPool(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("index.version.created_string", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("index.version.created_string", nettyHttpRequest0.rawPath());
      assertEquals("index.version.created_string", nettyHttpRequest0.uri());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(settings0);
      
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = settings0.getAsDouble(metaData0.CONTEXT_MODE_PARAM, double1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      
      MetaData metaData0 = routingNodes0.metaData();
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restShardsAction0);
      
      String string0 = "(p\"AA{";
      int int0 = 95;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.HEAD;
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(3, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(3, (int)localServerChannel0.getId());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nettyHttpRequest0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterName0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(95, httpVersion0.getMajorVersion());
      assertEquals(95, httpVersion0.getMinorVersion());
      assertEquals("(P\"AA{/95.95", httpVersion0.getText());
      assertEquals("(P\"AA{/95.95", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("(P\"AA{", httpVersion0.getProtocolName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("GATEWAY", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(3, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("GATEWAY", nettyHttpRequest0.uri());
      assertEquals("GATEWAY", nettyHttpRequest0.rawPath());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      
      // Undeclared exception!
      restShardsAction0.getTableWithHeader(nettyHttpRequest0);
  }
}
