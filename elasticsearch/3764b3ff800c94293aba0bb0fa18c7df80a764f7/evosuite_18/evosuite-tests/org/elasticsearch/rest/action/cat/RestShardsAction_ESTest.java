/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 07:17:16 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.Map;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.Diff;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.component.LifecycleListener;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.LongArray;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestFilter;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestShardsAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestShardsAction_ESTest extends RestShardsAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      
      HttpMethod httpMethod0 = HttpMethod.TRACE;
      assertNotNull(httpMethod0);
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      
      String string0 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertNotNull(table0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Map<String, Settings> map0 = settings0.getAsGroups();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      RestController restController0 = null;
      Client client0 = null;
      RestShardsAction restShardsAction0 = null;
      try {
        restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "I";
      int int0 = 1;
      boolean boolean0 = true;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertNotNull(httpVersion0);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertNotNull(httpMethod0);
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("I", defaultHttpRequest0.getUri());
      
      boolean boolean1 = true;
      defaultHttpRequest0.setChunked(boolean1);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("I", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("I", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("I", nettyHttpRequest0.rawPath());
      assertEquals("I", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings1, settings0);
      assertNotSame(settings0, settings1);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      NetworkService networkService0 = new NetworkService(settings1);
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(networkService0);
      
      String string1 = networkService0.nodeName();
      assertNotSame(settings1, settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(settings0.equals((Object)settings1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      long long0 = 0L;
      LongArray longArray0 = bigArrays0.newLongArray(long0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(longArray0);
      assertEquals(0L, longArray0.size());
      
      Settings settings2 = SettingsFilter.filterSettings(nettyHttpRequest0, settings0);
      assertNotSame(settings0, settings1);
      assertSame(settings0, settings2);
      assertNotSame(string0, string1);
      assertSame(settings2, settings0);
      assertNotSame(settings2, settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(settings2.equals((Object)settings1));
      assertNotNull(settings2);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("I", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("I", nettyHttpRequest0.rawPath());
      assertEquals("I", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      
      ThreadPool threadPool0 = new ThreadPool(settings2);
      assertTrue(settings0.equals((Object)settings1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(settings2.equals((Object)settings1));
      assertNotNull(threadPool0);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("I", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("I", nettyHttpRequest0.rawPath());
      assertEquals("I", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertTrue(settings0.equals((Object)settings1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(settings1.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings1));
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("I", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("I", nettyHttpRequest0.rawPath());
      assertEquals("I", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      boolean boolean2 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean2);
      assertTrue(settings0.equals((Object)settings1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(settings1.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings1));
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      assertEquals("I/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("I/1.1", httpVersion0.toString());
      assertEquals("I", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("I", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("I", nettyHttpRequest0.rawPath());
      assertEquals("I", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      String string0 = "Zone must not be null";
      boolean boolean0 = false;
      Map<String, Settings> map0 = settings1.getGroups(string0, boolean0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(map0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[1] = metaData0.ALL;
      stringArray0[2] = metaData0.ALL;
      String string1 = "match_all";
      stringArray0[3] = string1;
      stringArray0[4] = metaData0.CONTEXT_MODE_SNAPSHOT;
      String string2 = "getY called on empty Point";
      stringArray0[5] = string2;
      String string3 = settings1.get(stringArray0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(6, stringArray0.length);
      assertNull(string3);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restShardsAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertNotNull(httpMethod0);
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_PARAM);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("context_mode", defaultHttpRequest0.getUri());
      
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.removeLifecycleListener(lifecycleListener0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("context_mode", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("context_mode", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("context_mode", nettyHttpRequest0.uri());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(networkService0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(threadPool0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings1, networkService0, bigArrays0, threadPool0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      HttpMethod httpMethod1 = HttpMethod.GET;
      assertNotSame(httpMethod1, httpMethod0);
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertNotNull(httpMethod1);
      assertEquals("GET", httpMethod1.toString());
      assertEquals("GET", httpMethod1.getName());
      
      defaultHttpRequest0.setMethod(httpMethod1);
      assertNotSame(httpMethod0, httpMethod1);
      assertNotSame(httpMethod1, httpMethod0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("context_mode", defaultHttpRequest0.getUri());
      assertEquals("GET", httpMethod1.toString());
      assertEquals("GET", httpMethod1.getName());
      
      boolean boolean1 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("context_mode", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("context_mode", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("context_mode", nettyHttpRequest0.uri());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestRequest restRequest0 = null;
      Table table0 = restShardsAction0.getTableWithHeader(restRequest0);
      assertNotNull(table0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertNotNull(httpMethod0);
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_SNAPSHOT);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertNotNull(table0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      
      // Undeclared exception!
      restShardsAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = settings0.get(metaData0.CONTEXT_MODE_GATEWAY);
      assertNull(string0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.addLifecycleListener(lifecycleListener0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      int int0 = 98;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=98 cap=98]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(98, byteBuffer0.remaining());
      assertEquals(98, byteBuffer0.capacity());
      assertEquals(98, byteBuffer0.limit());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=98 cap=98]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(98, byteBuffer0.remaining());
      assertEquals(98, byteBuffer0.capacity());
      assertEquals(98, byteBuffer0.limit());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      Diff<MetaData> diff0 = metaData0.readDiffFrom(byteBufferStreamInput0);
      assertNotNull(diff0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(98, byteBuffer0.capacity());
      assertEquals(20, byteBuffer0.position());
      assertEquals(98, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=20 lim=98 cap=98]", byteBuffer0.toString());
      assertEquals(78, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      restController0.close();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      long long0 = 2161L;
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(stringBuilder1);
      assertEquals("b", stringBuilder1.toString());
      assertEquals("b", stringBuilder0.toString());
      
      StringBuilder stringBuilder2 = stringBuilder0.append(boolean0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals("bfalse", stringBuilder2.toString());
      assertEquals("bfalse", stringBuilder0.toString());
      
      StringBuilder stringBuilder3 = stringBuilder0.append(long0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(stringBuilder3);
      assertEquals("bfalse2161", stringBuilder3.toString());
      assertEquals("bfalse2161", stringBuilder0.toString());
      
      restShardsAction0.documentation(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertEquals("bfalse2161/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      
      String string1 = "";
      boolean boolean1 = false;
      HttpVersion httpVersion0 = null;
      try {
        httpVersion0 = new HttpVersion(string1, boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty text
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.addLifecycleListener(lifecycleListener0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestFilter restFilter0 = mock(RestFilter.class, new ViolatedAssumptionAnswer());
      restController0.close();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }
}
