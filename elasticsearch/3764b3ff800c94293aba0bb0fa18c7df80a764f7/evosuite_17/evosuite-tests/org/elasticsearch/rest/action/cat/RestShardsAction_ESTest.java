/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 07:10:49 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.apache.log4j.Logger;
import org.apache.lucene.search.FuzzyTermsEnum;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.metadata.RepositoriesMetaData;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.component.LifecycleListener;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.netty.NettyUtils;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.ClusterSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestShardsAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestShardsAction_ESTest extends RestShardsAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      String string0 = "u5[o>5ym;=8tF&:.v";
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("u5[o>5ym;=8tF&:.v", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("u5[o>5ym;=8tF&:.v", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("u5[o>5ym;=8tF&:.v", nettyHttpRequest0.rawPath());
      assertEquals("u5[o>5ym;=8tF&:.v", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("u5[o>5ym;=8tF&:.v", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("u5[o>5ym;=8tF&:.v", nettyHttpRequest0.rawPath());
      assertEquals("u5[o>5ym;=8tF&:.v", nettyHttpRequest0.uri());
      assertNotNull(table0);
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-28);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-64);
      byteArray0[3] = byte3;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-28), (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(4, byteArray0.length);
      
      Settings settings0 = Settings.readSettingsFromStream(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-28), (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(settings0);
      assertEquals(4, byteArray0.length);
      
      RestController restController0 = null;
      Client client0 = null;
      RestShardsAction restShardsAction0 = null;
      try {
        restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[2];
      char char0 = ')';
      charArray0[0] = char0;
      char char1 = 'g';
      charArray0[1] = char1;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, charArray0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(")g", stringBuilder0.toString());
      assertEquals(")g", stringBuilder1.toString());
      assertArrayEquals(new char[] {')', 'g'}, charArray0);
      assertNotNull(stringBuilder1);
      assertEquals(2, charArray0.length);
      
      StringBuilder stringBuilder2 = new StringBuilder(stringBuilder1);
      assertEquals(")g", stringBuilder0.toString());
      assertEquals(")g", stringBuilder1.toString());
      assertEquals(")g", stringBuilder2.toString());
      assertArrayEquals(new char[] {')', 'g'}, charArray0);
      assertNotNull(stringBuilder2);
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertEquals(2, charArray0.length);
      
      String string0 = "";
      int int1 = 0;
      int int2 = (-2046);
      StringBuilder stringBuilder3 = stringBuilder2.insert(int1, int2);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotSame(stringBuilder3, stringBuilder0);
      assertNotSame(stringBuilder3, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertEquals("-2046)g", stringBuilder3.toString());
      assertEquals(")g", stringBuilder0.toString());
      assertEquals(")g", stringBuilder1.toString());
      assertEquals("-2046)g", stringBuilder2.toString());
      assertArrayEquals(new char[] {')', 'g'}, charArray0);
      assertNotNull(stringBuilder3);
      assertFalse(stringBuilder3.equals((Object)stringBuilder0));
      assertFalse(stringBuilder3.equals((Object)stringBuilder1));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(int0 == int2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, charArray0.length);
      
      StringBuilder stringBuilder4 = stringBuilder2.append((Object) string0);
      assertNotSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertNotSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder4);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertEquals("-2046)g", stringBuilder4.toString());
      assertEquals(")g", stringBuilder0.toString());
      assertEquals(")g", stringBuilder1.toString());
      assertEquals("-2046)g", stringBuilder2.toString());
      assertArrayEquals(new char[] {')', 'g'}, charArray0);
      assertNotNull(stringBuilder4);
      assertFalse(stringBuilder4.equals((Object)stringBuilder1));
      assertFalse(stringBuilder4.equals((Object)stringBuilder0));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(int0 == int2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder3));
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertEquals(2, charArray0.length);
      
      StringBuilder stringBuilder5 = stringBuilder2.insert(int0, string0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder2);
      assertNotSame(stringBuilder5, stringBuilder0);
      assertNotSame(stringBuilder5, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder5);
      assertNotSame(stringBuilder0, stringBuilder4);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder5);
      assertNotSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder5);
      assertEquals("-2046)g", stringBuilder5.toString());
      assertEquals(")g", stringBuilder0.toString());
      assertEquals(")g", stringBuilder1.toString());
      assertEquals("-2046)g", stringBuilder2.toString());
      assertArrayEquals(new char[] {')', 'g'}, charArray0);
      assertNotNull(stringBuilder5);
      assertFalse(stringBuilder5.equals((Object)stringBuilder0));
      assertFalse(stringBuilder5.equals((Object)stringBuilder1));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder0.equals((Object)stringBuilder4));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(int0 == int2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder3));
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(stringBuilder1.equals((Object)stringBuilder4));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertEquals(2, charArray0.length);
      
      double double0 = 811.766;
      StringBuilder stringBuilder6 = stringBuilder5.insert(int0, double0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder6);
      assertSame(stringBuilder5, stringBuilder2);
      assertNotSame(stringBuilder5, stringBuilder0);
      assertNotSame(stringBuilder5, stringBuilder1);
      assertNotSame(stringBuilder6, stringBuilder0);
      assertSame(stringBuilder6, stringBuilder2);
      assertNotSame(stringBuilder6, stringBuilder1);
      assertSame(stringBuilder6, stringBuilder4);
      assertSame(stringBuilder6, stringBuilder3);
      assertSame(stringBuilder6, stringBuilder5);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder5);
      assertNotSame(stringBuilder0, stringBuilder4);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder5);
      assertNotSame(stringBuilder1, stringBuilder4);
      assertNotSame(stringBuilder1, stringBuilder6);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder6);
      assertEquals("811.766-2046)g", stringBuilder5.toString());
      assertEquals("811.766-2046)g", stringBuilder6.toString());
      assertEquals(")g", stringBuilder0.toString());
      assertEquals(")g", stringBuilder1.toString());
      assertEquals("811.766-2046)g", stringBuilder2.toString());
      assertArrayEquals(new char[] {')', 'g'}, charArray0);
      assertNotNull(stringBuilder6);
      assertFalse(stringBuilder5.equals((Object)stringBuilder0));
      assertFalse(stringBuilder5.equals((Object)stringBuilder1));
      assertFalse(stringBuilder6.equals((Object)stringBuilder0));
      assertFalse(stringBuilder6.equals((Object)stringBuilder1));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder0.equals((Object)stringBuilder5));
      assertFalse(stringBuilder0.equals((Object)stringBuilder4));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(int0 == int2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder3));
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(stringBuilder1.equals((Object)stringBuilder5));
      assertFalse(stringBuilder1.equals((Object)stringBuilder4));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertEquals(2, charArray0.length);
      
      restShardsAction0.documentation(stringBuilder5);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder6);
      assertSame(stringBuilder5, stringBuilder2);
      assertNotSame(stringBuilder5, stringBuilder0);
      assertNotSame(stringBuilder5, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder5);
      assertNotSame(stringBuilder0, stringBuilder4);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder5);
      assertNotSame(stringBuilder1, stringBuilder4);
      assertNotSame(stringBuilder1, stringBuilder6);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder6);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("811.766-2046)g/_cat/shards\n/_cat/shards/{index}\n", stringBuilder5.toString());
      assertEquals(")g", stringBuilder0.toString());
      assertEquals(")g", stringBuilder1.toString());
      assertEquals("811.766-2046)g/_cat/shards\n/_cat/shards/{index}\n", stringBuilder2.toString());
      assertArrayEquals(new char[] {')', 'g'}, charArray0);
      assertFalse(stringBuilder5.equals((Object)stringBuilder0));
      assertFalse(stringBuilder5.equals((Object)stringBuilder1));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder0.equals((Object)stringBuilder6));
      assertFalse(stringBuilder0.equals((Object)stringBuilder5));
      assertFalse(stringBuilder0.equals((Object)stringBuilder4));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(int0 == int2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder3));
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(stringBuilder1.equals((Object)stringBuilder5));
      assertFalse(stringBuilder1.equals((Object)stringBuilder6));
      assertFalse(stringBuilder1.equals((Object)stringBuilder4));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertEquals(2, charArray0.length);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      String string1 = "alias:scto,searchScrollTotal;default:false;text-align:right;desc:completed scroll contexts";
      HttpMethod httpMethod0 = null;
      try {
        httpMethod0 = new HttpMethod(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid character in name
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpMethod", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      String string0 = "((atRmIX<[1S*~DT[P";
      Logger logger0 = Logger.getRootLogger();
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertNotNull(eSLogger0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertNotNull(metaData1);
      
      Settings settings0 = metaData1.transientSettings();
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertNotNull(settings1);
      assertTrue(settings1.equals((Object)settings0));
      
      RestController restController0 = new RestController(settings0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      assertTrue(settings0.equals((Object)settings1));
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.valueOf(metaData1.ALL);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string1 = "p@G|";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("p@G|", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("p@G|", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("p@G|", nettyHttpRequest0.rawPath());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("p@G|", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(nettyHttpRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertNotSame(string0, string1);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotSame(string1, string0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("((atRmIX<[1S*~DT[P", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("_all", httpMethod0.getName());
      assertEquals("_all", httpMethod0.toString());
      assertEquals("p@G|", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("p@G|", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("p@G|", nettyHttpRequest0.rawPath());
      assertNotNull(table0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = settings0.get(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      String string2 = "g]k&:4y5'mz)";
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      assertEquals("g]k&:4y5'mz)", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string2.equals((Object)string0));
      
      restShardsAction0.documentation(stringBuilder0);
      assertNotSame(string2, string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("g]k&:4y5'mz)/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertFalse(string2.equals((Object)string0));
      
      restShardsAction0.documentation(stringBuilder0);
      assertNotSame(string2, string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("g]k&:4y5'mz)/_cat/shards\n/_cat/shards/{index}\n/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertFalse(string2.equals((Object)string0));
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.OPTIONS;
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string3 = "5]5l JZoqkz=U_MxGL";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string3);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("5]5l JZoqkz=U_MxGL", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      String string4 = restShardsAction0.nodeName();
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertNotNull(localChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("5]5l JZoqkz=U_MxGL", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("5]5l JZoqkz=U_MxGL", nettyHttpRequest0.uri());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("5]5l JZoqkz=U_MxGL", defaultHttpRequest0.getUri());
      assertNotNull(nettyHttpRequest0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      
      RestController restController1 = restController0.stop();
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, restController1.lifecycleState());
      assertNotNull(restController1);
      
      String string5 = "qt6X(!'@";
      boolean boolean0 = true;
      boolean boolean1 = nettyHttpRequest0.paramAsBoolean(string5, boolean0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("5]5l JZoqkz=U_MxGL", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("5]5l JZoqkz=U_MxGL", nettyHttpRequest0.uri());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("5]5l JZoqkz=U_MxGL", defaultHttpRequest0.getUri());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertTrue(boolean1);
      
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.removeLifecycleListener(lifecycleListener0);
      assertSame(restController0, restController1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertSame(restController0, restController1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("5]5l JZoqkz=U_MxGL", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("5]5l JZoqkz=U_MxGL", nettyHttpRequest0.uri());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("5]5l JZoqkz=U_MxGL", defaultHttpRequest0.getUri());
      assertNotNull(table0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      
      // Undeclared exception!
      restShardsAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      assertTrue(settings1.equals((Object)settings0));
      
      RestController restController0 = new RestController(settings1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.DELETE;
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string0 = "fielddata.memory_size";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("fielddata.memory_size", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertNotNull(localChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("fielddata.memory_size", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertEquals("fielddata.memory_size", nettyHttpRequest0.rawPath());
      assertEquals("fielddata.memory_size", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = null;
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertNotNull(pageCacheRecycler0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      boolean boolean0 = true;
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(bigArrays0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      boolean boolean1 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean1);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("fielddata.memory_size", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertEquals("fielddata.memory_size", nettyHttpRequest0.rawPath());
      assertEquals("fielddata.memory_size", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertNotNull(nettyHttpChannel0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.TRACE;
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_DATA_PATH);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("index.data_path", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("index.data_path", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.data_path", nettyHttpRequest0.uri());
      assertEquals("index.data_path", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = null;
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      int int0 = 3090;
      int int1 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int1);
      assertNotNull(mockInetSocketAddress0);
      assertFalse(int1 == int0);
      
      OrderedUpstreamMessageEvent orderedUpstreamMessageEvent0 = new OrderedUpstreamMessageEvent(int0, localServerChannel0, nettyHttpServerTransport0, mockInetSocketAddress0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(3090, orderedUpstreamMessageEvent0.getSequence());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(orderedUpstreamMessageEvent0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertEquals("192.168.1.42", string0);
      
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, orderedUpstreamMessageEvent0, boolean0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("index.data_path", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.data_path", nettyHttpRequest0.uri());
      assertEquals("index.data_path", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals("192.168.1.42/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(3090, orderedUpstreamMessageEvent0.getSequence());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertNotNull(nettyHttpChannel0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      String string0 = "9~1iNHV@fDrmY";
      RepositoriesMetaData repositoriesMetaData0 = metaData0.custom(string0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(repositoriesMetaData0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }
}
