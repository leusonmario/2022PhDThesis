/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 30 09:50:55 GMT 2021
 */

package rx.concurrency;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import rx.Scheduler;
import rx.Subscription;
import rx.concurrency.ImmediateScheduler;
import rx.concurrency.SleepingAction;
import rx.concurrency.TestScheduler;
import rx.util.functions.Func0;
import rx.util.functions.Func2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestScheduler_ESTest extends TestScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedule(func0_0, 2285L, timeUnit0);
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      Func2<Scheduler, ImmediateScheduler, Subscription> func2_0 = (Func2<Scheduler, ImmediateScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<ImmediateScheduler> sleepingAction0 = new SleepingAction<ImmediateScheduler>(func2_0, testScheduler0, 18L);
      Subscription subscription1 = testScheduler0.schedule(immediateScheduler0, (Func2<Scheduler, ImmediateScheduler, Subscription>) sleepingAction0);
      assertNotSame(subscription1, subscription0); // (Same) Original Value: false | Regression Value: true
  }
}
