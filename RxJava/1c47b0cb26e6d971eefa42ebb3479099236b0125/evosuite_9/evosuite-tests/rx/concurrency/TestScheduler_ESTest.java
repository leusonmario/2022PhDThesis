/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 30 09:42:39 GMT 2021
 */

package rx.concurrency;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import rx.Scheduler;
import rx.Subscription;
import rx.concurrency.CurrentThreadScheduler;
import rx.concurrency.DiscardableAction;
import rx.concurrency.ExecutorScheduler;
import rx.concurrency.ImmediateScheduler;
import rx.concurrency.NewThreadScheduler;
import rx.concurrency.SleepingAction;
import rx.concurrency.TestScheduler;
import rx.operators.SafeObservableSubscription;
import rx.subscriptions.BooleanSubscription;
import rx.subscriptions.CompositeSubscription;
import rx.util.functions.Action0;
import rx.util.functions.Func2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestScheduler_ESTest extends TestScheduler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Func2<Object, Integer, SafeObservableSubscription> func2_0 = null;
      Integer integer0 = null;
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, func2_0, integer0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler1.gettime());
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      testScheduler1.advanceTimeTo(testScheduler_TimedAction0.time, timeUnit0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      long long0 = (-1L);
      testScheduler_TimedAction0.scheduler.advanceTimeBy(long0, timeUnit0);
      assertSame(testScheduler0, testScheduler1);
      assertEquals((-1000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1000L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = 407L;
      SleepingAction<Object> sleepingAction0 = new SleepingAction<Object>(func2_0, testScheduler0, long0);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long1 = (-2520L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      long long2 = testScheduler0.gettime();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.gettime());
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertNotNull(queue0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long3 = (-1961L);
      testScheduler0.advanceTimeTo(long3, timeUnit0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals((-1961000000000L), testScheduler0.time);
      assertEquals((-1961000000000L), testScheduler0.gettime());
      
      long long4 = 0L;
      Func2<Object, Object, CompositeSubscription> func2_1 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long4, func2_1, integer0);
      assertFalse(long4 == long3);
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction0);
      assertEquals((-1961000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1961000000000L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      long long5 = testScheduler_TimedAction0.gettime();
      assertFalse(long4 == long3);
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long5 == long1);
      assertTrue(long5 == long2);
      assertTrue(long5 == long4);
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertEquals((-1961000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, long5);
      assertEquals((-1961000000000L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertFalse(long4 == long3);
      assertTrue(long4 == long5);
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler1, testScheduler0);
      assertSame(testScheduler0, testScheduler1);
      assertNotNull(testScheduler1);
      assertEquals((-1961000000000L), testScheduler1.time);
      assertEquals((-1961000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1961000000000L), testScheduler1.gettime());
      assertEquals((-1961000000000L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      long long6 = (-4057L);
      Func2<Object, Object, BooleanSubscription> func2_2 = null;
      TestScheduler.TimedAction<TestScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<TestScheduler>(testScheduler1, long6, func2_2, testScheduler1);
      assertFalse(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long0);
      assertFalse(long6 == long5);
      assertFalse(long6 == long3);
      assertFalse(long6 == long1);
      assertFalse(long4 == long3);
      assertTrue(long4 == long5);
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction1);
      assertEquals((-1961000000000L), testScheduler1.time);
      assertEquals((-1961000000000L), testScheduler0.time);
      assertEquals((-4057L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1961000000000L), testScheduler1.gettime());
      assertEquals((-1961000000000L), testScheduler0.gettime());
      assertEquals((-4057L), testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler2 = testScheduler_TimedAction1.getscheduler();
      assertFalse(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long0);
      assertFalse(long6 == long5);
      assertFalse(long6 == long3);
      assertFalse(long6 == long1);
      assertFalse(long4 == long3);
      assertTrue(long4 == long5);
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler1, testScheduler0);
      assertSame(testScheduler1, testScheduler2);
      assertSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler2, testScheduler0);
      assertSame(testScheduler2, testScheduler1);
      assertNotNull(testScheduler2);
      assertEquals((-1961000000000L), testScheduler1.time);
      assertEquals((-1961000000000L), testScheduler0.time);
      assertEquals((-4057L), testScheduler_TimedAction1.time);
      assertEquals((-1961000000000L), testScheduler2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1961000000000L), testScheduler1.gettime());
      assertEquals((-1961000000000L), testScheduler0.gettime());
      assertEquals((-4057L), testScheduler_TimedAction1.gettime());
      assertEquals((-1961000000000L), testScheduler2.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      // Undeclared exception!
      try { 
        testScheduler_TimedAction1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      CompositeSubscription compositeSubscription0 = null;
      Func2<Object, Object, CompositeSubscription> func2_1 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(compositeSubscription0).when(func2_1).call(any() , any());
      Subscription subscription0 = testScheduler0.schedule(testScheduler_TimedAction0.scheduler, (Func2<? super Scheduler, ? super TestScheduler, ? extends Subscription>) func2_1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      String string0 = testScheduler_TimedAction0.toString();
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(string0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      testScheduler1.triggerActions();
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      NewThreadScheduler newThreadScheduler0 = new NewThreadScheduler();
      assertNotNull(newThreadScheduler0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      testScheduler1.triggerActions();
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      long long0 = (-4629L);
      testScheduler_TimedAction0.scheduler.triggerActions();
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      long long1 = 0L;
      String string1 = testScheduler_TimedAction0.toString();
      assertTrue(string1.equals((Object)string0));
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      Func2<Object, Object, BooleanSubscription> func2_2 = null;
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler_TimedAction0.scheduler, long1, func2_2, currentThreadScheduler0);
      assertFalse(long1 == long0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      
      CurrentThreadScheduler currentThreadScheduler1 = testScheduler_TimedAction1.getstate();
      assertFalse(long1 == long0);
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertSame(currentThreadScheduler1, currentThreadScheduler0);
      assertNotNull(currentThreadScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      int int1 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0, int1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler_TimedAction0.scheduler.getqueue();
      assertTrue(int0 == int1);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertNotNull(queue0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      long long2 = 65L;
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      testScheduler_TimedAction0.scheduler.advanceTimeBy(long2, timeUnit2);
      assertTrue(int0 == int1);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(timeUnit2, timeUnit0);
      assertSame(timeUnit2, timeUnit1);
      assertEquals(65L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(65L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func2_0).toString();
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertNotNull(compositeSubscription0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, testScheduler0.time, func2_0, compositeSubscription0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      DiscardableAction<BooleanSubscription> discardableAction0 = null;
      Func2<Object, Object, BooleanSubscription> func2_1 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = 864L;
      long long1 = 1127L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedulePeriodically(discardableAction0, (Func2<? super Scheduler, ? super DiscardableAction<BooleanSubscription>, ? extends Subscription>) func2_1, long0, long1, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      Func2<? super Scheduler, ? super CompositeSubscription, ? extends Subscription> func2_2 = testScheduler_TimedAction0.getaction();
      assertNotNull(func2_2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertNotNull(booleanSubscription0);
      assertFalse(booleanSubscription0.isUnsubscribed());
      
      Func2<Object, Object, CompositeSubscription> func2_3 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      Subscription subscription1 = testScheduler0.schedule(booleanSubscription0, (Func2<? super Scheduler, ? super BooleanSubscription, ? extends Subscription>) func2_3, long0, timeUnit1);
      assertFalse(long0 == long1);
      assertFalse(subscription1.equals((Object)subscription0));
      assertSame(timeUnit1, timeUnit0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = testScheduler0.now();
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, long0);
      assertEquals(0L, testScheduler0.gettime());
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertNotNull(queue0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long1 = testScheduler0.now();
      assertTrue(long1 == long0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.gettime());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertTrue(long0 == long1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long2 = (-1730L);
      long long3 = testScheduler0.now();
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertTrue(long3 == long0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, long3);
      assertEquals(0L, testScheduler0.gettime());
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      TestScheduler testScheduler1 = new TestScheduler();
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler1.gettime());
      
      long long4 = 0L;
      long long5 = 0L;
      testScheduler1.advanceTimeBy(long5, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertTrue(long5 == long3);
      assertTrue(long5 == long0);
      assertTrue(long5 == long1);
      assertFalse(long5 == long2);
      assertNotSame(testScheduler1, testScheduler0);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler1.gettime());
      
      testScheduler1.triggerActions(long4);
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertTrue(long4 == long3);
      assertFalse(long4 == long2);
      assertTrue(long4 == long1);
      assertTrue(long4 == long0);
      assertNotSame(testScheduler1, testScheduler0);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler1.gettime());
      
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      Func2<Object, Object, BooleanSubscription> func2_0 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any() , any());
      Subscription subscription0 = testScheduler1.schedule(testScheduler0, (Func2<? super Scheduler, ? super TestScheduler, ? extends Subscription>) func2_0);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertNotSame(testScheduler0, testScheduler1);
      assertNotSame(testScheduler1, testScheduler0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      testScheduler1.advanceTimeTo(long3, timeUnit2);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertTrue(long3 == long5);
      assertTrue(long3 == long4);
      assertTrue(long3 == long0);
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertNotSame(testScheduler0, testScheduler1);
      assertNotSame(testScheduler1, testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      long long6 = testScheduler0.now();
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertTrue(long6 == long4);
      assertFalse(long6 == long2);
      assertTrue(long6 == long1);
      assertTrue(long6 == long5);
      assertTrue(long6 == long3);
      assertTrue(long6 == long0);
      assertNotSame(testScheduler0, testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, long6);
      assertEquals(0L, testScheduler0.gettime());
      
      Func2<Object, Object, SafeObservableSubscription> func2_1 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription1 = testScheduler0.schedule(testScheduler1, (Func2<? super Scheduler, ? super TestScheduler, ? extends Subscription>) func2_1);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertNotSame(testScheduler0, testScheduler1);
      assertSame(subscription1, subscription0);
      assertNotSame(testScheduler1, testScheduler0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      testScheduler0.advanceTimeBy(long2, timeUnit1);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(long2 == long4);
      assertFalse(long2 == long0);
      assertFalse(long2 == long5);
      assertFalse(long2 == long6);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(timeUnit1.equals((Object)timeUnit2));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotSame(testScheduler0, testScheduler1);
      assertEquals((-1730000L), testScheduler0.time);
      assertEquals((-1730000L), testScheduler0.gettime());
      
      long long7 = testScheduler0.now();
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(long7 == long2);
      assertFalse(long7 == long4);
      assertFalse(long7 == long0);
      assertFalse(long7 == long5);
      assertFalse(long7 == long6);
      assertFalse(long7 == long3);
      assertFalse(long7 == long1);
      assertNotSame(testScheduler0, testScheduler1);
      assertEquals((-1730000L), testScheduler0.time);
      assertEquals((-1L), long7);
      assertEquals((-1730000L), testScheduler0.gettime());
      
      long long8 = testScheduler0.now();
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(long8 == long0);
      assertFalse(long8 == long5);
      assertFalse(long8 == long6);
      assertFalse(long8 == long1);
      assertFalse(long8 == long3);
      assertTrue(long8 == long7);
      assertFalse(long8 == long2);
      assertFalse(long8 == long4);
      assertNotSame(testScheduler0, testScheduler1);
      assertEquals((-1730000L), testScheduler0.time);
      assertEquals((-1L), long8);
      assertEquals((-1730000L), testScheduler0.gettime());
      
      long long9 = testScheduler0.gettime();
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(long9 == long6);
      assertFalse(long9 == long8);
      assertFalse(long9 == long4);
      assertFalse(long9 == long5);
      assertFalse(long9 == long3);
      assertFalse(long9 == long0);
      assertFalse(long9 == long2);
      assertFalse(long9 == long7);
      assertFalse(long9 == long1);
      assertNotSame(testScheduler0, testScheduler1);
      assertEquals((-1730000L), testScheduler0.time);
      assertEquals((-1730000L), long9);
      assertEquals((-1730000L), testScheduler0.gettime());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 0L;
      testScheduler0.settime(long0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 0L;
      Func2<Object, Object, SafeObservableSubscription> func2_0 = null;
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long0, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      // Undeclared exception!
      try { 
        testScheduler_TimedAction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = null;
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertNotNull(booleanSubscription0);
      assertFalse(booleanSubscription0.isUnsubscribed());
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, testScheduler0.time, func2_0, booleanSubscription0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      assertEquals(1000L, testScheduler0.time);
      assertEquals(1000L, testScheduler0.gettime());
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertNotNull(queue0);
      assertEquals(1000L, testScheduler0.time);
      assertEquals(1000L, testScheduler0.gettime());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      String string0 = " k+a0]&B}IbH";
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, testScheduler0.time, func2_0, string0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(1000L, testScheduler0.time);
      assertEquals(1000L, testScheduler_TimedAction0.time);
      assertEquals(1000L, testScheduler0.gettime());
      assertEquals(1000L, testScheduler_TimedAction0.gettime());
      
      long long1 = testScheduler_TimedAction0.gettime();
      assertFalse(long1 == long0);
      assertEquals(1000L, testScheduler0.time);
      assertEquals(1000L, testScheduler_TimedAction0.time);
      assertEquals(1000L, long1);
      assertEquals(1000L, testScheduler0.gettime());
      assertEquals(1000L, testScheduler_TimedAction0.gettime());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = (-2320L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertEquals((-200448000000000000L), testScheduler0.time);
      assertEquals((-200448000000000000L), testScheduler0.gettime());
      
      long long1 = 1137L;
      Func2<Object, String, CompositeSubscription> func2_0 = null;
      String string0 = "";
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, long1, func2_0, string0);
      assertFalse(long1 == long0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals((-200448000000000000L), testScheduler0.time);
      assertEquals(1137L, testScheduler_TimedAction0.time);
      assertEquals((-200448000000000000L), testScheduler0.gettime());
      assertEquals(1137L, testScheduler_TimedAction0.gettime());
      
      String string1 = testScheduler_TimedAction0.getstate();
      assertFalse(long1 == long0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals((-200448000000000000L), testScheduler0.time);
      assertEquals(1137L, testScheduler_TimedAction0.time);
      assertEquals("", string1);
      assertEquals((-200448000000000000L), testScheduler0.gettime());
      assertEquals(1137L, testScheduler_TimedAction0.gettime());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = (-1637L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Action0 action0_1 = null;
      Subscription subscription1 = testScheduler0.schedule(action0_1, long0, timeUnit0);
      assertSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Action0 action0_2 = null;
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$4", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 692L;
      testScheduler0.settime(long0);
      assertEquals(692L, testScheduler0.time);
      assertEquals(692L, testScheduler0.gettime());
      
      long long1 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      testScheduler0.advanceTimeTo(long1, timeUnit0);
      assertFalse(long1 == long0);
      assertEquals((-86400000000000L), testScheduler0.time);
      assertEquals((-86400000000000L), testScheduler0.gettime());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      Func2<Object, Object, CompositeSubscription> func2_0 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription0 = testScheduler0.schedule(immediateScheduler0, (Func2<? super Scheduler, ? super ImmediateScheduler, ? extends Subscription>) func2_0, long0, timeUnit0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = (-967L);
      Func2<Object, TestScheduler, SafeObservableSubscription> func2_0 = (Func2<Object, TestScheduler, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      TestScheduler.TimedAction<TestScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<TestScheduler>(testScheduler0, long0, func2_0, testScheduler0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-967L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-967L), testScheduler_TimedAction0.gettime());
      
      String string0 = testScheduler_TimedAction0.toString();
      assertNotNull(string0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-967L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-967L), testScheduler_TimedAction0.gettime());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 1L;
      Func2<Object, Object, BooleanSubscription> func2_0 = null;
      NewThreadScheduler newThreadScheduler0 = new NewThreadScheduler();
      assertNotNull(newThreadScheduler0);
      
      TestScheduler.TimedAction<NewThreadScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<NewThreadScheduler>(testScheduler0, long0, func2_0, newThreadScheduler0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      
      int int0 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0, int0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Action0 action0_0 = null;
      long long0 = (-1013L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      String string0 = testScheduler_TimedAction0.toString();
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertNotNull(string0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      
      long long1 = 3256L;
      // Undeclared exception!
      try { 
        testScheduler1.triggerActions(long1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$4", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 0L;
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeTo(long0, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long1 = testScheduler0.gettime();
      assertTrue(long1 == long0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.gettime());
      
      long long2 = 0L;
      testScheduler0.settime(long2);
      assertTrue(long2 == long1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertEquals(1000000L, testScheduler0.time);
      assertEquals(1000000L, testScheduler0.gettime());
      
      long long1 = testScheduler0.gettime();
      assertFalse(long1 == long0);
      assertEquals(1000000L, testScheduler0.time);
      assertEquals(1000000L, long1);
      assertEquals(1000000L, testScheduler0.gettime());
      
      long long2 = testScheduler0.gettime();
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(1000000L, testScheduler0.time);
      assertEquals(1000000L, long2);
      assertEquals(1000000L, testScheduler0.gettime());
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertNotNull(booleanSubscription0);
      assertFalse(booleanSubscription0.isUnsubscribed());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(booleanSubscription0, (Func2<? super Scheduler, ? super BooleanSubscription, ? extends Subscription>) func2_0);
      assertNotNull(subscription0);
      assertEquals(1000000L, testScheduler0.time);
      assertEquals(1000000L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      SafeObservableSubscription safeObservableSubscription0 = new SafeObservableSubscription();
      assertNotNull(safeObservableSubscription0);
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      
      Func2<Object, SafeObservableSubscription, BooleanSubscription> func2_0 = (Func2<Object, SafeObservableSubscription, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      int int1 = 3376;
      int int2 = 3939;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int1, int0, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(mockDate0);
      
      Subscription subscription0 = testScheduler0.schedule(safeObservableSubscription0, (Func2<? super Scheduler, ? super SafeObservableSubscription, ? extends Subscription>) func2_0, (Date) mockDate0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertEquals("Fri Jun 21 17:06:39 GMT 1901", mockDate0.toString());
      
      long long0 = (-6399L);
      testScheduler0.triggerActions(long0);
      assertEquals((-6399L), testScheduler0.time);
      assertEquals((-6399L), testScheduler0.gettime());
      
      long long1 = (-3573L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      testScheduler0.advanceTimeBy(long1, timeUnit0);
      assertFalse(long1 == long0);
      assertEquals((-3573006399L), testScheduler0.time);
      assertEquals((-3573006399L), testScheduler0.gettime());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = (-1L);
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Integer integer0 = null;
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long0, func2_0, integer0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      
      String string0 = testScheduler_TimedAction0.toString();
      assertNotNull(string0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      
      testScheduler_TimedAction0.scheduler.triggerActions(testScheduler0.time);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      
      Action0 action0_0 = null;
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedule(action0_0);
      assertSame(testScheduler0, testScheduler1);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      
      long long1 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        testScheduler1.advanceTimeTo(long1, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$3", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 2784L;
      Action0 action0_0 = null;
      long long1 = 1L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      testScheduler0.advanceTimeTo(long1, timeUnit0);
      assertFalse(long1 == long0);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      long long2 = 0L;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      long long3 = (-399L);
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long3, long3, timeUnit0);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertNotNull(subscription0);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      Subscription subscription1 = testScheduler0.schedulePeriodically(action0_0, long0, long2, timeUnit1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      Action0 action0_1 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long4 = 1L;
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      Subscription subscription2 = testScheduler0.schedule(action0_1, long4, timeUnit2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertNotNull(subscription2);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      TimeUnit timeUnit3 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeBy(long0, timeUnit3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$5", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any() , any());
      long long1 = 0L;
      Subscription subscription0 = testScheduler0.schedulePeriodically(immediateScheduler0, (Func2<? super Scheduler, ? super ImmediateScheduler, ? extends Subscription>) func2_0, long0, long1, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Subscription subscription1 = testScheduler0.schedulePeriodically(action0_0, long0, long0, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long2 = 1585L;
      // Undeclared exception!
      testScheduler0.triggerActions(long2);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          TestScheduler testScheduler0 = new TestScheduler();
          assertNotNull(testScheduler0);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler0.gettime());
          
          Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
          int int0 = 1462;
          Integer integer0 = new Integer(int0);
          assertTrue(integer0.equals((Object)int0));
          assertNotNull(integer0);
          assertEquals(1462, (int)integer0);
          
          TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, func2_0, integer0);
          assertTrue(integer0.equals((Object)int0));
          assertNotNull(testScheduler_TimedAction0);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertEquals(0L, testScheduler0.gettime());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          
          TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
          assertSame(testScheduler1, testScheduler0);
          assertNotNull(testScheduler1);
          assertEquals(0L, testScheduler1.time);
          assertEquals(0L, testScheduler1.gettime());
          
          Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
          long long0 = (-665L);
          long long1 = (-2067L);
          TimeUnit timeUnit0 = TimeUnit.MINUTES;
          Subscription subscription0 = testScheduler1.schedulePeriodically(action0_0, long0, long1, timeUnit0);
          assertTrue(integer0.equals((Object)int0));
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          assertSame(testScheduler0, testScheduler1);
          assertSame(testScheduler1, testScheduler0);
          assertNotNull(subscription0);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertEquals(0L, testScheduler1.time);
          assertEquals(0L, testScheduler0.gettime());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler1.gettime());
          
          TimeUnit timeUnit1 = TimeUnit.DAYS;
          // Undeclared exception!
          testScheduler1.advanceTimeTo(testScheduler_TimedAction0.time, timeUnit1);
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long0 = 1L;
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      int int0 = (-331);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-331), (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long0, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler1.gettime());
      
      Func2<Object, String, CompositeSubscription> func2_1 = (Func2<Object, String, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      String string0 = testScheduler_TimedAction0.toString();
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertNotNull(string0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      
      String string1 = "VG^'|-rVP3O";
      TestScheduler.TimedAction<String> testScheduler_TimedAction1 = new TestScheduler.TimedAction<String>(testScheduler1, testScheduler0.time, func2_1, string1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      
      Func2<Object, ImmediateScheduler, SafeObservableSubscription> func2_2 = (Func2<Object, ImmediateScheduler, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      String string2 = testScheduler_TimedAction0.toString();
      assertTrue(integer0.equals((Object)int0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction2 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler1, testScheduler0.time, func2_2, immediateScheduler0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long1 = 0L;
      long long2 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Subscription subscription0 = testScheduler_TimedAction2.scheduler.schedulePeriodically(action0_0, long1, long2, timeUnit0);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      
      long long3 = 1L;
      Action0 action0_1 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription1 = immediateScheduler0.schedule(action0_1);
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      // Undeclared exception!
      testScheduler_TimedAction2.scheduler.advanceTimeBy(long3, timeUnit1);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long0, long0, timeUnit0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      long long1 = (-1L);
      // Undeclared exception!
      testScheduler0.triggerActions();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      Func2<Object, Object, BooleanSubscription> func2_0 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = 3600000000000L;
      testScheduler0.settime(long0);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      Subscription subscription0 = testScheduler0.schedule(currentThreadScheduler0, (Func2<? super Scheduler, ? super CurrentThreadScheduler, ? extends Subscription>) func2_0);
      assertNotNull(subscription0);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      System.setCurrentTimeMillis(testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      int int0 = (-2145338308);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2145338308), (int)integer0);
      
      Func2<Object, Integer, BooleanSubscription> func2_1 = (Func2<Object, Integer, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription1 = testScheduler0.schedule(integer0, (Func2<? super Scheduler, ? super Integer, ? extends Subscription>) func2_1, (long) int0, timeUnit0);
      assertTrue(integer0.equals((Object)int0));
      assertSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      long long1 = testScheduler0.now();
      assertFalse(long1 == long0);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000L, long1);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertNotNull(queue0);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      SafeObservableSubscription safeObservableSubscription0 = new SafeObservableSubscription();
      assertNotNull(safeObservableSubscription0);
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      
      SafeObservableSubscription safeObservableSubscription1 = safeObservableSubscription0.wrap(subscription0);
      assertSame(subscription0, subscription1);
      assertSame(safeObservableSubscription0, safeObservableSubscription1);
      assertSame(safeObservableSubscription1, safeObservableSubscription0);
      assertNotNull(safeObservableSubscription1);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertFalse(safeObservableSubscription1.isUnsubscribed());
      
      Func2<Object, SafeObservableSubscription, SafeObservableSubscription> func2_2 = (Func2<Object, SafeObservableSubscription, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long2 = 1300L;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription2 = testScheduler0.schedule(safeObservableSubscription0, (Func2<? super Scheduler, ? super SafeObservableSubscription, ? extends Subscription>) func2_2, long2, timeUnit1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertSame(subscription2, subscription0);
      assertSame(subscription2, subscription1);
      assertSame(safeObservableSubscription0, safeObservableSubscription1);
      assertNotNull(subscription2);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      
      long long3 = testScheduler0.now();
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000L, long3);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      System.setCurrentTimeMillis(testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      System.setCurrentTimeMillis(long3);
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      long long4 = testScheduler0.now();
      assertFalse(long4 == long2);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertFalse(long4 == long0);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000L, long4);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      Queue<TestScheduler.TimedAction<?>> queue1 = testScheduler0.getqueue();
      assertSame(queue1, queue0);
      assertNotNull(queue1);
      assertEquals(3600000000000L, testScheduler0.time);
      assertEquals(3600000000000L, testScheduler0.gettime());
      
      long long5 = (-26456400000000000L);
      System.setCurrentTimeMillis(long5);
      assertFalse(long5 == long2);
      assertFalse(long5 == long3);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
  }
}
