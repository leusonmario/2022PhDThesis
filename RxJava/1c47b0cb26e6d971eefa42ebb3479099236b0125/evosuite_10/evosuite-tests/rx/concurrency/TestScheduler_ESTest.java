/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 30 09:50:30 GMT 2021
 */

package rx.concurrency;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.Chronology;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAmount;
import java.util.Date;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import rx.Scheduler;
import rx.Subscription;
import rx.concurrency.CurrentThreadScheduler;
import rx.concurrency.DiscardableAction;
import rx.concurrency.ExecutorScheduler;
import rx.concurrency.ImmediateScheduler;
import rx.concurrency.NewThreadScheduler;
import rx.concurrency.SleepingAction;
import rx.concurrency.TestScheduler;
import rx.subscriptions.BooleanSubscription;
import rx.subscriptions.CompositeSubscription;
import rx.util.AtomicObservableSubscription;
import rx.util.functions.Action0;
import rx.util.functions.Func0;
import rx.util.functions.Func1;
import rx.util.functions.Func2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestScheduler_ESTest extends TestScheduler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Subscription subscription0 = null;
      Func2<Scheduler, ImmediateScheduler, Subscription> func2_0 = (Func2<Scheduler, ImmediateScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(subscription0, subscription0).when(func2_0).call(any(rx.Scheduler.class) , any(rx.concurrency.ImmediateScheduler.class));
      SleepingAction<ImmediateScheduler> sleepingAction0 = new SleepingAction<ImmediateScheduler>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler0, testScheduler0.time, sleepingAction0, immediateScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TestScheduler testScheduler1 = new TestScheduler();
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler1.time);
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler1, immediateScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertNotSame(testScheduler0, testScheduler1);
      assertNotSame(testScheduler1, testScheduler0);
      assertNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler1.time);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      booleanSubscription0.unsubscribe();
      assertTrue(booleanSubscription0.isUnsubscribed());
      
      Subscription subscription2 = testScheduler_TimedAction0.scheduler.schedule(booleanSubscription0, (Func2<Scheduler, BooleanSubscription, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertNotSame(testScheduler0, testScheduler1);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      ImmediateScheduler immediateScheduler1 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertNotSame(testScheduler0, testScheduler1);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertSame(immediateScheduler1, immediateScheduler0);
      assertNotNull(immediateScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      testScheduler0.advanceTimeTo(testScheduler_TimedAction0.time, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertNotSame(testScheduler0, testScheduler1);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      testScheduler0.advanceTimeBy(testScheduler_TimedAction0.time, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertNotSame(testScheduler0, testScheduler1);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertSame(timeUnit1, timeUnit0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      ImmediateScheduler immediateScheduler2 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertSame(immediateScheduler2, immediateScheduler1);
      assertSame(immediateScheduler2, immediateScheduler0);
      assertNotSame(testScheduler0, testScheduler1);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertSame(immediateScheduler0, immediateScheduler2);
      assertNotNull(immediateScheduler2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      String string0 = "";
      long long0 = 2459L;
      String string1 = "";
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction1 = (TestScheduler.TimedAction<CompositeSubscription>) mock(TestScheduler.TimedAction.class, new ViolatedAssumptionAnswer());
      long long1 = 855L;
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(func0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = (Func2<Scheduler, Integer, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(subscription0, subscription0).when(func2_0).call(any(rx.Scheduler.class) , anyInt());
      long long0 = (-3277L);
      SleepingAction<Integer> sleepingAction0 = new SleepingAction<Integer>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      int int0 = 438;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(438, (int)integer0);
      assertNotNull(integer0);
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, integer0);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertSame(subscription0, subscription1);
      assertSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(subscription1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_1 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(atomicObservableSubscription0, subscription0, subscription0, subscription1, subscription1).when(func2_1).call(any(rx.Scheduler.class) , any(rx.util.AtomicObservableSubscription.class));
      NewThreadScheduler newThreadScheduler0 = new NewThreadScheduler();
      assertNotNull(newThreadScheduler0);
      
      SleepingAction<AtomicObservableSubscription> sleepingAction1 = new SleepingAction<AtomicObservableSubscription>(func2_1, newThreadScheduler0, int0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(sleepingAction1);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription2 = testScheduler0.schedulePeriodically(atomicObservableSubscription0, (Func2<Scheduler, AtomicObservableSubscription, Subscription>) sleepingAction1, long0, (long) int0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertSame(subscription0, subscription1);
      assertSame(subscription1, subscription0);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      
      int int1 = (-3105);
      Integer integer1 = new Integer(int1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(int1 == int0);
      assertEquals((-3105), (int)integer1);
      assertNotNull(integer1);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, sleepingAction0, integer1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(int1 == int0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      NewThreadScheduler newThreadScheduler1 = new NewThreadScheduler();
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertNotNull(newThreadScheduler1);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Object>(testScheduler0, int1, testScheduler_TimedAction0.action, newThreadScheduler1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(int1 == int0);
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(subscription0));
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      assertFalse(linkedList0.contains(subscription0));
      
      DiscardableAction<CompositeSubscription> discardableAction0 = new DiscardableAction<CompositeSubscription>(compositeSubscription0, testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(int1 == int0);
      assertNotNull(discardableAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription0));
      
      long long1 = (-3104L);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription3 = testScheduler_TimedAction1.scheduler.schedulePeriodically((Func1<Scheduler, Subscription>) discardableAction0, (long) int1, long1, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription3.equals((Object)subscription1));
      assertFalse(subscription3.equals((Object)subscription2));
      assertFalse(subscription3.equals((Object)subscription0));
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertSame(subscription0, subscription1);
      assertNotSame(subscription3, subscription2);
      assertNotNull(subscription3);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      assertFalse(linkedList0.contains(subscription0));
      
      testScheduler_TimedAction1.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertSame(subscription0, subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      
      long long2 = testScheduler_TimedAction0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(int1 == int0);
      assertSame(subscription0, subscription1);
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long3 = (-1L);
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(int1 == int0);
      assertSame(subscription0, subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      testScheduler_TimedAction1.scheduler.triggerActions(long3);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(int1 == int0);
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertSame(subscription0, subscription1);
      assertEquals((-1L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      
      long long4 = 0L;
      TimeUnit timeUnit2 = TimeUnit.MINUTES;
      Subscription subscription4 = testScheduler_TimedAction1.scheduler.schedule((Object) integer1, (Func2<Scheduler, Object, Subscription>) testScheduler_TimedAction0.action, long4, timeUnit2);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(subscription4.equals((Object)subscription1));
      assertFalse(subscription4.equals((Object)subscription3));
      assertFalse(subscription4.equals((Object)subscription0));
      assertFalse(subscription4.equals((Object)subscription2));
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(long0 == long4);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertTrue(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(int1 == int0);
      assertNotSame(subscription4, subscription1);
      assertNotSame(subscription4, subscription0);
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertSame(subscription0, subscription1);
      assertNotSame(subscription0, subscription4);
      assertNotNull(subscription4);
      assertEquals((-1L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      
      AtomicBoolean atomicBoolean0 = testScheduler_TimedAction0.getisCancelled();
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertTrue(atomicBoolean0.get());
      assertEquals("true", atomicBoolean0.toString());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription0.equals((Object)subscription4));
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(long0 == long4);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(int1 == int0);
      assertSame(subscription0, subscription1);
      assertNotSame(subscription0, subscription4);
      assertNotNull(atomicBoolean0);
      assertEquals((-1L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      int int0 = 2806;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2806, (int)integer0);
      assertNotNull(integer0);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = null;
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_1 = null;
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, int0, func2_1, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(2806L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(2806L, testScheduler_TimedAction0.time);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_2 = testScheduler_TimedAction0.action;
      assertNull(func2_2);
      
      long long0 = (-1L);
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_2, testScheduler_TimedAction0.scheduler, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(2806L, testScheduler_TimedAction0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(2806L, testScheduler_TimedAction0.time);
      
      long long1 = 418L;
      MockDate mockDate0 = new MockDate(long1);
      assertFalse(long1 == long0);
      assertNotNull(mockDate0);
      
      Subscription subscription0 = testScheduler0.schedule(booleanSubscription0, (Func2<Scheduler, BooleanSubscription, Subscription>) sleepingAction0, (Date) mockDate0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(2806L, testScheduler_TimedAction0.gettime());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(2806L, testScheduler_TimedAction0.time);
      
      long long2 = (-832L);
      SleepingAction<Integer> sleepingAction1 = new SleepingAction<Integer>(func2_0, testScheduler0, long2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotNull(sleepingAction1);
      assertEquals(0L, testScheduler0.time);
      
      Subscription subscription1 = testScheduler0.schedule(integer0, (Func2<Scheduler, Integer, Subscription>) sleepingAction1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(subscription1.equals((Object)subscription0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      long long3 = 0L;
      long long4 = 252L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Subscription subscription2 = testScheduler0.schedulePeriodically(func0_0, long3, long4, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long3 == long0);
      assertFalse(long3 == long4);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      
      long long5 = (-3147L);
      testScheduler0.settime(long5);
      assertEquals((-3147L), testScheduler0.gettime());
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertEquals((-3147L), testScheduler0.time);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertEquals((-3147L), testScheduler0.gettime());
      assertNotNull(queue0);
      assertEquals((-3147L), testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      long long0 = (-951L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      long long1 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.time);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, String, Subscription> func2_0 = (Func2<Scheduler, String, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<String> sleepingAction0 = new SleepingAction<String>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      String string0 = "";
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      long long0 = 1055L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(func0_0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, testScheduler0.time, sleepingAction0, string0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      String string1 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      Func2<Scheduler, String, Subscription> func2_1 = testScheduler_TimedAction0.getaction();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(string0.equals((Object)string1));
      assertFalse(func2_1.equals((Object)func2_0));
      assertNotSame(string0, string1);
      assertNotNull(func2_1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      long long0 = 3941L;
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long1 = (-2857L);
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = null;
      BooleanSubscription booleanSubscription0 = null;
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long1, func2_0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-2857L), testScheduler_TimedAction0.gettime());
      assertFalse(long1 == long0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-2857L), testScheduler_TimedAction0.time);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Action0 action0_1 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_1, long0, long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedule(action0_0, testScheduler0.time, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-2857L), testScheduler_TimedAction0.gettime());
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-2857L), testScheduler_TimedAction0.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-2857L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(long1 == long0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-2857L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler1.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-2857L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(long1 == long0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(queue0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-2857L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      String string0 = "Q\\!+0Qx+\"qa{\"Y";
      Func2<Scheduler, String, Subscription> func2_0 = null;
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      Action0 action0_0 = null;
      long long0 = 2866L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      AtomicObservableSubscription atomicObservableSubscription1 = atomicObservableSubscription0.wrap(subscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertFalse(atomicObservableSubscription1.isUnsubscribed());
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertNotNull(atomicObservableSubscription1);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_1 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      atomicObservableSubscription0.unsubscribe();
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      
      long long1 = (-212L);
      SleepingAction<AtomicObservableSubscription> sleepingAction0 = new SleepingAction<AtomicObservableSubscription>(func2_1, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      Subscription subscription1 = testScheduler0.schedulePeriodically(atomicObservableSubscription0, (Func2<Scheduler, AtomicObservableSubscription, Subscription>) sleepingAction0, long1, long1, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      
      long long2 = 0L;
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      Subscription subscription2 = testScheduler0.schedule(string0, func2_0, long2, timeUnit2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertSame(timeUnit2, timeUnit1);
      assertNotSame(subscription2, subscription0);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 1652L;
      Func2<Scheduler, ImmediateScheduler, Subscription> func2_0 = null;
      SleepingAction<ImmediateScheduler> sleepingAction0 = new SleepingAction<ImmediateScheduler>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler0, long0, sleepingAction0, immediateScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1652L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1652L, testScheduler_TimedAction0.time);
      
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1652L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1652L, testScheduler_TimedAction0.time);
      
      int int0 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1652L, testScheduler_TimedAction0.gettime());
      assertEquals(0, int0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1652L, testScheduler_TimedAction0.time);
      
      testScheduler_TimedAction0.scheduler.settime(testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1652L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1652L, testScheduler_TimedAction0.time);
      
      testScheduler0.settime(long0);
      assertEquals(1652L, testScheduler0.gettime());
      assertEquals(1652L, testScheduler0.time);
      
      long long1 = 0L;
      Integer integer0 = new Integer(int0);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertEquals(1652L, testScheduler0.time);
      assertEquals(1652L, testScheduler_TimedAction0.time);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Integer>(testScheduler0, long1, testScheduler_TimedAction0.action, integer0);
      assertEquals(1652L, testScheduler0.gettime());
      assertEquals(1652L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(1652L, testScheduler0.time);
      assertEquals(1652L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction1.getscheduler();
      assertEquals(1652L, testScheduler0.gettime());
      assertEquals(1652L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(1652L, testScheduler1.gettime());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(1652L, testScheduler0.time);
      assertEquals(1652L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(1652L, testScheduler1.time);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, TestScheduler, Subscription> func2_0 = null;
      TestScheduler.TimedAction<TestScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<TestScheduler>(testScheduler0, long0, func2_0, testScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      String string0 = ">r_hd";
      long long1 = (-1L);
      Instant instant0 = MockInstant.ofEpochMilli(long1);
      assertFalse(long1 == long0);
      assertNotNull(instant0);
      
      long long2 = 0L;
      Duration duration0 = Duration.ofSeconds(testScheduler0.time, long2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long1);
      assertNotNull(duration0);
      assertEquals(0L, testScheduler0.time);
      
      Instant instant1 = MockInstant.plus(instant0, (TemporalAmount) duration0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(0L, testScheduler0.time);
      
      Date date0 = Date.from(instant1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(date0);
      assertEquals(0L, testScheduler0.time);
      
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedule(string0, (Func2<Scheduler, String, Subscription>) testScheduler_TimedAction0.action, date0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      AtomicObservableSubscription atomicObservableSubscription0 = null;
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<AtomicObservableSubscription> sleepingAction0 = new SleepingAction<AtomicObservableSubscription>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(atomicObservableSubscription0, (Func2<Scheduler, AtomicObservableSubscription, Subscription>) sleepingAction0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      long long1 = testScheduler0.now();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.time);
      
      long long2 = 0L;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeTo(long2, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 416L;
      Func2<Scheduler, TestScheduler.TimedAction<Object>, Subscription> func2_0 = (Func2<Scheduler, TestScheduler.TimedAction<Object>, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<TestScheduler.TimedAction<Object>> sleepingAction0 = new SleepingAction<TestScheduler.TimedAction<Object>>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction0 = (TestScheduler.TimedAction<Object>) mock(TestScheduler.TimedAction.class, new ViolatedAssumptionAnswer());
      TestScheduler.TimedAction<TestScheduler.TimedAction<Object>> testScheduler_TimedAction1 = new TestScheduler.TimedAction<TestScheduler.TimedAction<Object>>(testScheduler0, long0, sleepingAction0, testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(416L, testScheduler_TimedAction1.gettime());
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(416L, testScheduler_TimedAction1.time);
      
      long long1 = testScheduler_TimedAction1.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(416L, testScheduler_TimedAction1.gettime());
      assertTrue(long1 == long0);
      assertEquals(416L, long1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(416L, testScheduler_TimedAction1.time);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = (-494L);
      Func2<Scheduler, Object, Subscription> func2_0 = null;
      long long1 = 0L;
      SleepingAction<Object> sleepingAction0 = new SleepingAction<Object>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      long long2 = testScheduler0.now();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.time);
      
      Object object0 = null;
      TestScheduler.TimedAction<Object> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Object>(testScheduler0, long0, sleepingAction0, object0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-494L), testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-494L), testScheduler_TimedAction0.time);
      
      Object object1 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-494L), testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertNull(object1);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-494L), testScheduler_TimedAction0.time);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = null;
      long long0 = 0L;
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = null;
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long0, func2_0, booleanSubscription0);
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      AtomicBoolean atomicBoolean0 = testScheduler_TimedAction0.getisCancelled();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertNotNull(atomicBoolean0);
      assertEquals(0L, testScheduler_TimedAction0.time);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      long long1 = (-1L);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      testScheduler0.advanceTimeTo(long1, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals(0L, testScheduler0.time);
      
      long long2 = testScheduler0.now();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = (-1L);
      long long1 = 764L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      long long2 = 1L;
      testScheduler0.triggerActions(long2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.advanceTimeTo(long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions(long0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(0L, testScheduler0.time);
      
      long long3 = (-1352L);
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      testScheduler0.advanceTimeTo(long3, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals(0L, testScheduler0.time);
      
      long long4 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals(0L, long4);
      assertEquals(0L, testScheduler0.time);
      
      long long5 = (-1640L);
      testScheduler0.advanceTimeBy(long5, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, CompositeSubscription, Subscription> func2_0 = null;
      long long6 = 0L;
      SleepingAction<CompositeSubscription> sleepingAction0 = new SleepingAction<CompositeSubscription>(func2_0, testScheduler0, long6);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long6 == long0);
      assertTrue(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long3);
      assertFalse(long6 == long1);
      assertFalse(long6 == long5);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, long2, sleepingAction0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertFalse(long6 == long0);
      assertTrue(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long3);
      assertFalse(long6 == long1);
      assertFalse(long6 == long5);
      assertFalse(long2 == long1);
      assertFalse(long2 == long5);
      assertFalse(long2 == long4);
      assertFalse(long2 == long0);
      assertFalse(long2 == long6);
      assertFalse(long2 == long3);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(long6 == long0);
      assertTrue(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long3);
      assertFalse(long6 == long1);
      assertFalse(long6 == long5);
      assertFalse(long2 == long1);
      assertFalse(long2 == long5);
      assertFalse(long2 == long4);
      assertFalse(long2 == long0);
      assertFalse(long2 == long6);
      assertFalse(long2 == long3);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, String, Subscription> func2_0 = (Func2<Scheduler, String, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = (-1700L);
      SleepingAction<String> sleepingAction0 = new SleepingAction<String>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      String string0 = "oc3'ksld'Oow3E'";
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, testScheduler0.time, sleepingAction0, string0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      long long1 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedule((Object) testScheduler0, (Func2<Scheduler, Object, Subscription>) testScheduler_TimedAction0.action, long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertSame(testScheduler0, testScheduler1);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      TestScheduler testScheduler1 = null;
      Func2<Scheduler, TestScheduler, Subscription> func2_0 = null;
      SleepingAction<TestScheduler> sleepingAction0 = new SleepingAction<TestScheduler>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      int int0 = (-1188);
      int int1 = (-2832);
      MockDate mockDate0 = new MockDate(int0, int0, int1, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mockDate0);
      
      Subscription subscription0 = testScheduler0.schedule(testScheduler1, (Func2<Scheduler, TestScheduler, Subscription>) sleepingAction0, (Date) mockDate0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals("Sun Feb 07 12:48:00 GMT 605", mockDate0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, ExecutorScheduler, Subscription> func2_1 = (Func2<Scheduler, ExecutorScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      long long0 = 2591L;
      testScheduler0.triggerActions((long) int1);
      assertEquals((-2832L), testScheduler0.gettime());
      assertFalse(int1 == int0);
      assertEquals((-2832L), testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = (-813L);
      testScheduler0.triggerActions(long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      long long1 = 0L;
      long long2 = (-3383L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      testScheduler0.advanceTimeTo(long2, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, testScheduler0.time);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long3 = (-1L);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long3, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      testScheduler0.advanceTimeBy(long1, timeUnit2);
      assertEquals((-1000000000L), testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertEquals((-1000000000L), testScheduler0.time);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertEquals((-1000000000L), testScheduler0.gettime());
      assertNotNull(queue0);
      assertEquals((-1000000000L), testScheduler0.time);
      
      long long4 = testScheduler0.now();
      assertEquals((-1000000000L), testScheduler0.gettime());
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals((-1000L), long4);
      assertEquals((-1000000000L), testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      Func2<Scheduler, CompositeSubscription, Subscription> func2_0 = null;
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, long0, func2_0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      Func2<Scheduler, CompositeSubscription, Subscription> func2_1 = testScheduler_TimedAction0.getaction();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNull(func2_1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      Subscription subscription0 = testScheduler0.schedule(booleanSubscription0, (Func2<Scheduler, BooleanSubscription, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription0));
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime1 = new TestScheduler.CompareActionsByTime();
      assertFalse(testScheduler_CompareActionsByTime1.equals((Object)testScheduler_CompareActionsByTime0));
      assertNotNull(testScheduler_CompareActionsByTime1);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      Func2<Scheduler, TestScheduler, Subscription> func2_0 = null;
      long long1 = (-1600L);
      SleepingAction<TestScheduler> sleepingAction0 = new SleepingAction<TestScheduler>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      TestScheduler.TimedAction<TestScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<TestScheduler>(testScheduler0, long0, sleepingAction0, testScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      String string0 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(string0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = (Func2<Scheduler, Integer, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , anyInt());
      long long0 = (-3277L);
      SleepingAction<Integer> sleepingAction0 = new SleepingAction<Integer>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      int int0 = 438;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(438, (int)integer0);
      assertNotNull(integer0);
      
      Subscription subscription0 = sleepingAction0.call((Scheduler) testScheduler0, integer0);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(subscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_1 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_1).call(any(rx.Scheduler.class) , any(rx.util.AtomicObservableSubscription.class));
      NewThreadScheduler newThreadScheduler0 = new NewThreadScheduler();
      assertNotNull(newThreadScheduler0);
      
      SleepingAction<AtomicObservableSubscription> sleepingAction1 = new SleepingAction<AtomicObservableSubscription>(func2_1, newThreadScheduler0, int0);
      assertNotNull(sleepingAction1);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription1 = testScheduler0.schedulePeriodically(atomicObservableSubscription0, (Func2<Scheduler, AtomicObservableSubscription, Subscription>) sleepingAction1, long0, (long) int0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      
      int int1 = (-3105);
      Integer integer1 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals((-3105), (int)integer1);
      assertNotNull(integer1);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, sleepingAction0, integer1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      NewThreadScheduler newThreadScheduler1 = new NewThreadScheduler();
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertNotNull(newThreadScheduler1);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Object>(testScheduler0, int1, testScheduler_TimedAction0.action, newThreadScheduler1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(subscription1));
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      assertFalse(linkedList0.contains(subscription1));
      
      DiscardableAction<CompositeSubscription> discardableAction0 = new DiscardableAction<CompositeSubscription>(compositeSubscription0, testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(discardableAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription1));
      
      long long1 = (-3104L);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription2 = testScheduler_TimedAction1.scheduler.schedulePeriodically((Func1<Scheduler, Subscription>) discardableAction0, (long) int1, long1, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertNotSame(subscription2, subscription1);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription2));
      
      testScheduler_TimedAction1.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long2 = testScheduler_TimedAction0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long3 = (-1L);
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      testScheduler_TimedAction1.scheduler.triggerActions(long3);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertEquals((-1L), testScheduler0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long4 = 0L;
      TimeUnit timeUnit2 = TimeUnit.MINUTES;
      Subscription subscription3 = testScheduler_TimedAction1.scheduler.schedule((Object) integer1, (Func2<Scheduler, Object, Subscription>) testScheduler_TimedAction0.action, long4, timeUnit2);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals((-3105L), testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(newThreadScheduler1.equals((Object)newThreadScheduler0));
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long4);
      assertFalse(long0 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertTrue(long4 == long2);
      assertFalse(int1 == int0);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(subscription3.equals((Object)subscription1));
      assertFalse(subscription3.equals((Object)subscription2));
      assertNotSame(newThreadScheduler1, newThreadScheduler0);
      assertNotNull(subscription3);
      assertEquals((-1L), testScheduler0.time);
      assertEquals((-3105L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      AtomicBoolean atomicBoolean0 = testScheduler_TimedAction0.getisCancelled();
      assertEquals("true", atomicBoolean0.toString());
      assertTrue(atomicBoolean0.get());
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long4);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(atomicBoolean0);
      assertEquals((-1L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TimeUnit timeUnit3 = TimeUnit.DAYS;
      // Undeclared exception!
      testScheduler_TimedAction1.scheduler.advanceTimeBy(int0, timeUnit3);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      Func2<Scheduler, CompositeSubscription, Subscription> func2_0 = null;
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, long0, func2_0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      Func2<Scheduler, CompositeSubscription, Subscription> func2_1 = testScheduler_TimedAction0.getaction();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNull(func2_1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      Subscription subscription0 = testScheduler0.schedule(booleanSubscription0, (Func2<Scheduler, BooleanSubscription, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription0));
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, long0);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      Action0 action0_1 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription1 = testScheduler0.schedule(action0_1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      testScheduler0.triggerActions(long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(subscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertFalse(subscription0.equals((Object)subscription1));
      assertNotNull(atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.util.AtomicObservableSubscription.class));
      long long1 = 0L;
      SleepingAction<AtomicObservableSubscription> sleepingAction0 = new SleepingAction<AtomicObservableSubscription>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription2 = testScheduler0.schedulePeriodically(atomicObservableSubscription0, (Func2<Scheduler, AtomicObservableSubscription, Subscription>) sleepingAction0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertFalse(subscription0.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertNotSame(subscription0, subscription1);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, Integer, Subscription> func2_1 = null;
      int int0 = 3747;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3747, (int)integer0);
      assertNotNull(integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long0, func2_1, integer0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      Integer integer1 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(3747, (int)integer1);
      assertNotNull(integer1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long2 = 3010L;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      // Undeclared exception!
      testScheduler_TimedAction0.scheduler.advanceTimeTo(long2, timeUnit1);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, NewThreadScheduler, Subscription> func2_0 = (Func2<Scheduler, NewThreadScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.concurrency.NewThreadScheduler.class));
      SleepingAction<NewThreadScheduler> sleepingAction0 = new SleepingAction<NewThreadScheduler>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      NewThreadScheduler newThreadScheduler0 = new NewThreadScheduler();
      assertNotNull(newThreadScheduler0);
      
      TestScheduler.TimedAction<NewThreadScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<NewThreadScheduler>(testScheduler0, testScheduler0.time, sleepingAction0, newThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      String string0 = "TZsPq=c6R1p'7l_";
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedule(string0, (Func2<Scheduler, String, Subscription>) testScheduler_TimedAction0.action, (Date) mockDate0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler1.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(queue0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      Subscription subscription1 = testScheduler1.schedule((Object) currentThreadScheduler0, (Func2<Scheduler, Object, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(subscription1.equals((Object)subscription0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      long long0 = 0L;
      long long1 = (-1938L);
      SleepingAction<Object> sleepingAction1 = new SleepingAction<Object>(testScheduler_TimedAction0.action, testScheduler1, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(long1 == long0);
      assertNotNull(sleepingAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Object>(testScheduler1, long0, sleepingAction1, subscription1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(subscription1.equals((Object)subscription0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func0_0).call();
      long long2 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription2 = testScheduler_TimedAction1.scheduler.schedulePeriodically(func0_0, testScheduler_TimedAction1.time, long2, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(subscription1.equals((Object)subscription0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      testScheduler_TimedAction1.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(subscription1.equals((Object)subscription0));
      assertFalse(subscription1.equals((Object)subscription2));
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotSame(subscription1, subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Subscription subscription3 = testScheduler_TimedAction0.scheduler.schedule(currentThreadScheduler0, (Func2<Scheduler, CurrentThreadScheduler, Subscription>) testScheduler_TimedAction0.action, long1, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription3.equals((Object)subscription0));
      assertFalse(subscription3.equals((Object)subscription2));
      assertFalse(subscription3.equals((Object)subscription1));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(subscription3, subscription0);
      assertNotSame(subscription3, subscription1);
      assertNotNull(subscription3);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      // Undeclared exception!
      testScheduler_TimedAction0.scheduler.triggerActions(testScheduler1.time);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = null;
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      BooleanSubscription booleanSubscription0 = null;
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long0, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      String string0 = "# {W#";
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedulePeriodically(string0, (Func2<Scheduler, String, Subscription>) testScheduler_TimedAction0.action, testScheduler0.time, testScheduler0.time, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler1.time);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(subscription0));
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      assertFalse(linkedList0.contains(subscription0));
      
      NewThreadScheduler newThreadScheduler0 = NewThreadScheduler.getInstance();
      assertNotNull(newThreadScheduler0);
      
      SleepingAction<CompositeSubscription> sleepingAction1 = new SleepingAction<CompositeSubscription>(testScheduler_TimedAction0.action, newThreadScheduler0, testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertNotNull(sleepingAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedule(compositeSubscription0, (Func2<Scheduler, CompositeSubscription, Subscription>) sleepingAction1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(subscription1.equals((Object)subscription0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertFalse(linkedList0.contains(subscription1));
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler1.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(queue0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(subscription0);
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(subscription0.equals((Object)subscription1));
      assertNotNull(atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      // Undeclared exception!
      try { 
        testScheduler1.advanceTimeTo(testScheduler_TimedAction0.time, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.SleepingAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = (-3490L);
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = null;
      long long1 = (-60L);
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long0, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals((-3490L), testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-3490L), testScheduler_TimedAction0.time);
      
      Action0 action0_1 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long2 = 0L;
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedulePeriodically(action0_1, long2, long1, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals((-3490L), testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-3490L), testScheduler_TimedAction0.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler1.time);
      
      booleanSubscription0.unsubscribe();
      assertTrue(booleanSubscription0.isUnsubscribed());
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      booleanSubscription0.unsubscribe();
      assertTrue(booleanSubscription0.isUnsubscribed());
      
      Subscription subscription2 = testScheduler1.schedule((Object) atomicObservableSubscription0, (Func2<Scheduler, Object, Subscription>) testScheduler_TimedAction0.action);
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertEquals((-3490L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(subscription2, subscription0);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-3490L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      Comparable<String> comparable0 = null;
      Subscription subscription3 = testScheduler1.schedule(comparable0, (Func2<Scheduler, Comparable<String>, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertEquals((-3490L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(subscription3.equals((Object)subscription0));
      assertFalse(subscription3.equals((Object)subscription1));
      assertFalse(subscription3.equals((Object)subscription2));
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(subscription3, subscription0);
      assertNotSame(subscription3, subscription2);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(subscription3);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-3490L), testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      
      NewThreadScheduler newThreadScheduler0 = null;
      TestScheduler.TimedAction<NewThreadScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<NewThreadScheduler>(testScheduler0, testScheduler0.time, testScheduler_TimedAction0.action, newThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertEquals((-3490L), testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals((-3490L), testScheduler_TimedAction0.time);
      
      Action0 action0_2 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long3 = (-196L);
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      Subscription subscription4 = testScheduler_TimedAction1.scheduler.schedule(action0_2, long3, timeUnit2);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertEquals((-3490L), testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(subscription4.equals((Object)subscription1));
      assertFalse(subscription4.equals((Object)subscription0));
      assertFalse(subscription4.equals((Object)subscription2));
      assertFalse(subscription4.equals((Object)subscription3));
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(subscription4, subscription0);
      assertNotSame(subscription4, subscription2);
      assertNotSame(subscription4, subscription3);
      assertNotNull(subscription4);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals((-3490L), testScheduler_TimedAction0.time);
      
      long long4 = testScheduler_TimedAction1.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertEquals((-3490L), testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(0L, long4);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals((-3490L), testScheduler_TimedAction0.time);
      
      // Undeclared exception!
      try { 
        testScheduler1.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.SleepingAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, Object, Subscription> func2_0 = (Func2<Scheduler, Object, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any(rx.Scheduler.class) , any());
      SleepingAction<Object> sleepingAction0 = new SleepingAction<Object>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 20L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Object>(testScheduler0, testScheduler0.time, sleepingAction0, object0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      AtomicBoolean atomicBoolean0 = testScheduler_TimedAction0.getisCancelled();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertNotNull(atomicBoolean0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      int int0 = 0;
      Subscription subscription0 = sleepingAction0.call((Scheduler) testScheduler0, object0);
      assertEquals(0L, testScheduler0.gettime());
      assertNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Integer>(testScheduler_TimedAction0.scheduler, testScheduler0.time, testScheduler_TimedAction0.action, integer0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      Func0<Subscription> func0_0 = null;
      String string0 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(string0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long1 = (-839L);
      Subscription subscription1 = testScheduler0.schedulePeriodically(func0_0, long1, (long) int0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler_TimedAction1.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      testScheduler_TimedAction1.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction1.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(integer0.equals((Object)int0));
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        testScheduler1.advanceTimeBy(int0, timeUnit1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$10", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      Func2<Scheduler, CompositeSubscription, Subscription> func2_0 = (Func2<Scheduler, CompositeSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      SleepingAction<CompositeSubscription> sleepingAction0 = new SleepingAction<CompositeSubscription>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      DiscardableAction<CompositeSubscription> discardableAction0 = new DiscardableAction<CompositeSubscription>(compositeSubscription0, sleepingAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(discardableAction0);
      assertEquals(0L, testScheduler0.time);
      
      long long1 = (-1L);
      discardableAction0.unsubscribe();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(long0 == long1);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedule((Func1<Scheduler, Subscription>) discardableAction0, long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertFalse(linkedList0.contains(subscription0));
      
      long long2 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.time);
      
      long long3 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertEquals(0L, long3);
      assertEquals(0L, testScheduler0.time);
      
      long long4 = (-644L);
      testScheduler0.triggerActions(long4);
      assertEquals((-1000L), testScheduler0.gettime());
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertEquals((-1000L), testScheduler0.time);
      
      Func2<Scheduler, Comparable<ImmediateScheduler>, Subscription> func2_1 = (Func2<Scheduler, Comparable<ImmediateScheduler>, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long5 = 0L;
      SleepingAction<Comparable<ImmediateScheduler>> sleepingAction1 = new SleepingAction<Comparable<ImmediateScheduler>>(func2_1, testScheduler0, long5);
      assertEquals((-1000L), testScheduler0.gettime());
      assertFalse(long5 == long1);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertNotNull(sleepingAction1);
      assertEquals((-1000L), testScheduler0.time);
      
      Comparable<ImmediateScheduler> comparable0 = (Comparable<ImmediateScheduler>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      TestScheduler.TimedAction<Comparable<ImmediateScheduler>> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Comparable<ImmediateScheduler>>(testScheduler0, long4, sleepingAction1, comparable0);
      assertEquals((-1000L), testScheduler0.gettime());
      assertEquals((-644L), testScheduler_TimedAction0.gettime());
      assertFalse(long5 == long1);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long5);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals((-1000L), testScheduler0.time);
      assertEquals((-644L), testScheduler_TimedAction0.time);
      
      Comparable<ImmediateScheduler> comparable1 = testScheduler_TimedAction0.getstate();
      assertEquals((-1000L), testScheduler0.gettime());
      assertEquals((-644L), testScheduler_TimedAction0.gettime());
      assertFalse(long5 == long1);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long5);
      assertSame(comparable1, comparable0);
      assertNotNull(comparable1);
      assertEquals((-1000L), testScheduler0.time);
      assertEquals((-644L), testScheduler_TimedAction0.time);
      
      long long6 = 221L;
      testScheduler0.advanceTimeTo(long6, timeUnit0);
      assertEquals((-1000L), testScheduler0.gettime());
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertFalse(long6 == long3);
      assertFalse(long6 == long5);
      assertFalse(long6 == long0);
      assertFalse(long6 == long1);
      assertEquals((-1000L), testScheduler0.time);
      
      testScheduler_TimedAction0.scheduler.settime(long1);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals((-644L), testScheduler_TimedAction0.gettime());
      assertFalse(long5 == long1);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long6);
      assertTrue(long5 == long3);
      assertFalse(long1 == long4);
      assertFalse(long1 == long6);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long5);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(long4 == long3);
      assertFalse(long4 == long5);
      assertEquals((-1L), testScheduler0.time);
      assertEquals((-644L), testScheduler_TimedAction0.time);
      
      long long7 = testScheduler0.gettime();
      assertEquals((-1L), testScheduler0.gettime());
      assertFalse(long7 == long5);
      assertFalse(long7 == long0);
      assertFalse(long7 == long2);
      assertFalse(long7 == long4);
      assertTrue(long7 == long1);
      assertFalse(long7 == long6);
      assertFalse(long7 == long3);
      assertEquals((-1L), long7);
      assertEquals((-1L), testScheduler0.time);
      
      long long8 = (-1L);
      Comparable<CompositeSubscription> comparable2 = (Comparable<CompositeSubscription>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      TestScheduler.TimedAction<Comparable<CompositeSubscription>> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Comparable<CompositeSubscription>>(testScheduler_TimedAction0.scheduler, long8, testScheduler_TimedAction0.action, comparable2);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals((-644L), testScheduler_TimedAction0.gettime());
      assertEquals((-1L), testScheduler_TimedAction1.gettime());
      assertFalse(long5 == long1);
      assertFalse(long5 == long7);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long6);
      assertFalse(long5 == long8);
      assertTrue(long5 == long3);
      assertFalse(long8 == long5);
      assertFalse(long8 == long0);
      assertFalse(long8 == long6);
      assertFalse(long8 == long3);
      assertFalse(long8 == long4);
      assertTrue(long8 == long7);
      assertFalse(long8 == long2);
      assertFalse(long4 == long2);
      assertFalse(long4 == long8);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(long4 == long3);
      assertFalse(long4 == long7);
      assertFalse(long4 == long5);
      assertNotNull(testScheduler_TimedAction1);
      assertEquals((-1L), testScheduler0.time);
      assertEquals((-644L), testScheduler_TimedAction0.time);
      assertEquals((-1L), testScheduler_TimedAction1.time);
      
      Comparable<CompositeSubscription> comparable3 = testScheduler_TimedAction1.getstate();
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals((-644L), testScheduler_TimedAction0.gettime());
      assertEquals((-1L), testScheduler_TimedAction1.gettime());
      assertFalse(long5 == long1);
      assertFalse(long5 == long7);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long6);
      assertFalse(long5 == long8);
      assertTrue(long5 == long3);
      assertFalse(long8 == long5);
      assertFalse(long8 == long0);
      assertFalse(long8 == long6);
      assertFalse(long8 == long3);
      assertFalse(long8 == long4);
      assertTrue(long8 == long7);
      assertFalse(long8 == long2);
      assertFalse(long4 == long2);
      assertFalse(long4 == long8);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(long4 == long3);
      assertFalse(long4 == long7);
      assertFalse(long4 == long5);
      assertSame(comparable3, comparable2);
      assertNotNull(comparable3);
      assertEquals((-1L), testScheduler0.time);
      assertEquals((-644L), testScheduler_TimedAction0.time);
      assertEquals((-1L), testScheduler_TimedAction1.time);
      
      long long9 = 1L;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Chronology chronology0 = Chronology.from(localDateTime0);
      assertNotNull(chronology0);
      
      // Undeclared exception!
      try { 
        chronology0.zonedDateTime((TemporalAccessor) localDateTime0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ZonedDateTime from TemporalAccessor: 2014-02-14T20:21:21.320 of type java.time.LocalDateTime
         //
         verifyException("java.time.ZonedDateTime", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      Subscription subscription0 = testScheduler0.schedule(func0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription1 = testScheduler0.schedule(action0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, long0);
      assertEquals(0L, testScheduler0.time);
      
      long long1 = (-1L);
      testScheduler0.settime(long1);
      assertEquals((-1L), testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertEquals((-1L), testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals((-1L), testScheduler0.time);
      
      long long2 = 1L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      testScheduler0.advanceTimeTo(long2, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, testScheduler0.time);
      
      long long3 = 0L;
      testScheduler0.triggerActions(long3);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(0L, testScheduler0.time);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      AtomicObservableSubscription atomicObservableSubscription1 = atomicObservableSubscription0.wrap(subscription1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertFalse(atomicObservableSubscription1.isUnsubscribed());
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertNotNull(atomicObservableSubscription1);
      assertEquals(0L, testScheduler0.time);
      
      atomicObservableSubscription1.unsubscribe();
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.util.AtomicObservableSubscription.class));
      SleepingAction<AtomicObservableSubscription> sleepingAction0 = new SleepingAction<AtomicObservableSubscription>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      Subscription subscription2 = testScheduler0.schedule(atomicObservableSubscription1, (Func2<Scheduler, AtomicObservableSubscription, Subscription>) sleepingAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription2, subscription0);
      assertNotSame(subscription2, subscription1);
      assertNotSame(subscription1, subscription0);
      assertNotSame(subscription1, subscription2);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertNotNull(subscription2);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_0 = null;
      SleepingAction<CurrentThreadScheduler> sleepingAction0 = new SleepingAction<CurrentThreadScheduler>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler0, testScheduler0.time, sleepingAction0, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      CurrentThreadScheduler currentThreadScheduler1 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertSame(currentThreadScheduler1, currentThreadScheduler0);
      assertNotNull(currentThreadScheduler1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      Subscription[] subscriptionArray0 = new Subscription[0];
      long long0 = 1L;
      testScheduler0.settime(long0);
      assertEquals(1L, testScheduler0.gettime());
      assertEquals(1L, testScheduler0.time);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(subscriptionArray0);
      assertEquals(0, subscriptionArray0.length);
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      DiscardableAction<CompositeSubscription> discardableAction0 = new DiscardableAction<CompositeSubscription>(compositeSubscription0, testScheduler_TimedAction0.action);
      assertEquals(0, subscriptionArray0.length);
      assertEquals(1L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(discardableAction0);
      assertEquals(1L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long1 = 407L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedulePeriodically((Func1<Scheduler, Subscription>) discardableAction0, testScheduler_TimedAction0.time, long1, timeUnit0);
      assertEquals(0, subscriptionArray0.length);
      assertEquals(1L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(long1 == long0);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertNotNull(subscription0);
      assertEquals(1L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long2 = 1249L;
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions(long2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.SleepingAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(queue0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      testScheduler0.settime(long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      long long1 = 0L;
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.subscriptions.BooleanSubscription.class));
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long1, func2_0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_1 = testScheduler_TimedAction0.action;
      assertSame(func2_1, func2_0);
      assertNotNull(func2_1);
      
      long long2 = (-1L);
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long1 == long2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_1, testScheduler_TimedAction0.scheduler, long2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedulePeriodically(testScheduler0, (Func2<Scheduler, TestScheduler, Subscription>) testScheduler_TimedAction0.action, long2, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      // Undeclared exception!
      testScheduler_TimedAction0.scheduler.triggerActions();
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 2152L;
      long long1 = testScheduler0.now();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.settime(long0);
      assertEquals(2152L, testScheduler0.gettime());
      assertFalse(long0 == long1);
      assertEquals(2152L, testScheduler0.time);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertEquals(2152L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(2152L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(2152L, testScheduler0.gettime());
      assertEquals(2152L, testScheduler0.time);
      
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      assertEquals(2152L, testScheduler0.gettime());
      assertFalse(long0 == long1);
      assertEquals(2152L, testScheduler0.time);
      
      long long2 = 0L;
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Subscription subscription1 = testScheduler0.schedulePeriodically(func0_0, long0, long2, timeUnit1);
      assertEquals(2152L, testScheduler0.gettime());
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      assertEquals(2152L, testScheduler0.time);
      
      testScheduler0.advanceTimeBy(long2, timeUnit0);
      assertEquals(2152L, testScheduler0.gettime());
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(2152L, testScheduler0.time);
      
      long long3 = testScheduler0.now();
      assertEquals(2152L, testScheduler0.gettime());
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertEquals(0L, long3);
      assertEquals(2152L, testScheduler0.time);
      
      long long4 = testScheduler0.gettime();
      assertEquals(2152L, testScheduler0.gettime());
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertTrue(long4 == long0);
      assertEquals(2152L, long4);
      assertEquals(2152L, testScheduler0.time);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(subscription1);
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(2152L, testScheduler0.gettime());
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long0 == long4);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertTrue(long2 == long1);
      assertTrue(long2 == long3);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(atomicObservableSubscription0);
      assertEquals(2152L, testScheduler0.time);
      
      // Undeclared exception!
      try { 
        atomicObservableSubscription0.wrap(subscription1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not set subscription more than once.
         //
         verifyException("rx.util.AtomicObservableSubscription", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      Func2<Scheduler, CompositeSubscription, Subscription> func2_0 = (Func2<Scheduler, CompositeSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      
      SleepingAction<CompositeSubscription> sleepingAction0 = new SleepingAction<CompositeSubscription>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(subscription0));
      
      boolean boolean0 = linkedList0.add(subscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(0L, testScheduler0.time);
      assertTrue(linkedList0.contains(subscription0));
      
      testScheduler0.settime(long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      assertTrue(linkedList0.contains(subscription0));
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, long0, sleepingAction0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertTrue(linkedList0.contains(subscription0));
      
      long long1 = testScheduler_TimedAction0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertTrue(linkedList0.contains(subscription0));
      
      long long2 = 0L;
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler0, long2, testScheduler_TimedAction0.action, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(long0 == long1);
      assertTrue(long2 == long1);
      assertNotNull(testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertTrue(linkedList0.contains(subscription0));
      
      long long3 = 150L;
      testScheduler_TimedAction1.scheduler.settime(long3);
      assertEquals(150L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals(150L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertTrue(linkedList0.contains(subscription0));
      
      Action0 action0_1 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long4 = 637L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription1 = testScheduler0.schedule(action0_1, long4, timeUnit0);
      assertEquals(150L, testScheduler0.gettime());
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      assertEquals(150L, testScheduler0.time);
      
      Action0 action0_2 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long5 = 1744L;
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      Subscription subscription2 = testScheduler_TimedAction0.scheduler.schedule(action0_2, long5, timeUnit1);
      assertEquals(150L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(long0 == long4);
      assertFalse(long0 == long5);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long4);
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertNotSame(subscription2, subscription1);
      assertNotSame(subscription2, subscription0);
      assertNotNull(subscription2);
      assertEquals(150L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(linkedList0.contains(subscription2));
      assertTrue(linkedList0.contains(subscription0));
      
      TestScheduler testScheduler1 = testScheduler_TimedAction1.getscheduler();
      assertEquals(150L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertEquals(150L, testScheduler1.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(long0 == long4);
      assertFalse(long0 == long5);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(long2 == long3);
      assertFalse(long2 == long5);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(testScheduler1);
      assertEquals(150L, testScheduler0.time);
      assertEquals(150L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertFalse(linkedList0.contains(subscription2));
      assertTrue(linkedList0.contains(subscription0));
      
      long long6 = (-1L);
      testScheduler0.settime(long6);
      assertEquals((-1L), testScheduler0.gettime());
      assertFalse(long6 == long0);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertFalse(long6 == long5);
      assertFalse(long6 == long3);
      assertFalse(long6 == long1);
      assertSame(testScheduler0, testScheduler1);
      assertEquals((-1L), testScheduler0.time);
      
      long long7 = 5222L;
      testScheduler_TimedAction1.scheduler.advanceTimeBy(long7, timeUnit0);
      assertEquals(637000000150L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(long0 == long6);
      assertFalse(long0 == long4);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(long7 == long6);
      assertFalse(long7 == long1);
      assertFalse(long7 == long2);
      assertFalse(long7 == long4);
      assertFalse(long7 == long0);
      assertFalse(long7 == long5);
      assertFalse(long7 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long3);
      assertFalse(long2 == long7);
      assertFalse(long2 == long5);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(637000000150L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertFalse(linkedList0.contains(subscription2));
      assertTrue(linkedList0.contains(subscription0));
      
      long long8 = testScheduler1.now();
      assertEquals(637000000150L, testScheduler0.gettime());
      assertEquals(1, linkedList0.size());
      assertEquals(637000000150L, testScheduler1.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(long0 == long6);
      assertFalse(long0 == long4);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long3);
      assertFalse(long2 == long7);
      assertFalse(long2 == long5);
      assertFalse(long8 == long4);
      assertFalse(long8 == long1);
      assertFalse(long8 == long6);
      assertFalse(long8 == long7);
      assertFalse(long8 == long5);
      assertFalse(long8 == long3);
      assertFalse(long8 == long2);
      assertFalse(long8 == long0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(637000L, long8);
      assertEquals(637000000150L, testScheduler0.time);
      assertEquals(637000000150L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertFalse(linkedList0.contains(subscription2));
      assertTrue(linkedList0.contains(subscription0));
      
      testScheduler0.triggerActions();
      assertEquals(637000000150L, testScheduler0.gettime());
      assertSame(testScheduler0, testScheduler1);
      assertEquals(637000000150L, testScheduler0.time);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction2 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler0, testScheduler1.time, testScheduler_TimedAction0.action, immediateScheduler0);
      assertEquals(637000000150L, testScheduler0.gettime());
      assertEquals(637000000150L, testScheduler_TimedAction2.gettime());
      assertEquals(1, linkedList0.size());
      assertEquals(637000000150L, testScheduler1.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(long0 == long6);
      assertFalse(long0 == long4);
      assertFalse(long0 == long8);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long8);
      assertFalse(long2 == long3);
      assertFalse(long2 == long7);
      assertFalse(long2 == long5);
      assertNotNull(testScheduler_TimedAction2);
      assertEquals(637000000150L, testScheduler0.time);
      assertEquals(637000000150L, testScheduler_TimedAction2.time);
      assertEquals(637000000150L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertFalse(linkedList0.contains(subscription2));
      assertTrue(linkedList0.contains(subscription0));
      
      String string0 = testScheduler_TimedAction2.toString();
      assertEquals(637000000150L, testScheduler0.gettime());
      assertEquals(637000000150L, testScheduler_TimedAction2.gettime());
      assertEquals(1, linkedList0.size());
      assertEquals(637000000150L, testScheduler1.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(long0 == long6);
      assertFalse(long0 == long4);
      assertFalse(long0 == long8);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long8);
      assertFalse(long2 == long3);
      assertFalse(long2 == long7);
      assertFalse(long2 == long5);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertNotNull(string0);
      assertEquals(637000000150L, testScheduler0.time);
      assertEquals(637000000150L, testScheduler_TimedAction2.time);
      assertEquals(637000000150L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertFalse(linkedList0.contains(subscription2));
      assertTrue(linkedList0.contains(subscription0));
      
      testScheduler_TimedAction2.cancel();
      assertEquals(637000000150L, testScheduler0.gettime());
      assertEquals(637000000150L, testScheduler_TimedAction2.gettime());
      assertEquals(1, linkedList0.size());
      assertEquals(637000000150L, testScheduler1.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertFalse(long0 == long6);
      assertFalse(long0 == long4);
      assertFalse(long0 == long8);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long8);
      assertFalse(long2 == long3);
      assertFalse(long2 == long7);
      assertFalse(long2 == long5);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(637000000150L, testScheduler0.time);
      assertEquals(637000000150L, testScheduler_TimedAction2.time);
      assertEquals(637000000150L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertFalse(linkedList0.contains(subscription2));
      assertTrue(linkedList0.contains(subscription0));
      
      long long9 = testScheduler0.gettime();
      assertEquals(637000000150L, testScheduler0.gettime());
      assertFalse(long9 == long2);
      assertFalse(long9 == long0);
      assertFalse(long9 == long7);
      assertFalse(long9 == long1);
      assertFalse(long9 == long3);
      assertFalse(long9 == long6);
      assertFalse(long9 == long8);
      assertFalse(long9 == long5);
      assertFalse(long9 == long4);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(637000000150L, long9);
      assertEquals(637000000150L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertNotNull(testScheduler0);
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      long long1 = (-1L);
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      Func2<Scheduler, CompositeSubscription, Subscription> func2_0 = (Func2<Scheduler, CompositeSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long2 = (-1663L);
      SleepingAction<CompositeSubscription> sleepingAction0 = new SleepingAction<CompositeSubscription>(func2_0, testScheduler0, long2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotNull(sleepingAction0);
      assertEquals(0L, testScheduler0.time);
      
      DiscardableAction<CompositeSubscription> discardableAction0 = new DiscardableAction<CompositeSubscription>(compositeSubscription0, sleepingAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotNull(discardableAction0);
      assertEquals(0L, testScheduler0.time);
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedule((Func1<Scheduler, Subscription>) discardableAction0, long0, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertSame(timeUnit1, timeUnit0);
      assertNotNull(subscription0);
      assertEquals(0L, testScheduler0.time);
      assertFalse(linkedList0.contains(subscription0));
      
      TimeUnit timeUnit2 = TimeUnit.MINUTES;
      testScheduler0.advanceTimeTo(long1, timeUnit2);
      assertEquals((-60000000000L), testScheduler0.gettime());
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertEquals((-60000000000L), testScheduler0.time);
      
      long long3 = testScheduler0.now();
      assertEquals((-60000000000L), testScheduler0.gettime());
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals((-60000L), long3);
      assertEquals((-60000000000L), testScheduler0.time);
  }
}
