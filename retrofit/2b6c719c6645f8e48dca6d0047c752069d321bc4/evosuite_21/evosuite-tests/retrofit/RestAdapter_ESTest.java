/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 06:27:21 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.app.NativeActivity;
import android.os.Parcel;
import android.os.Parcelable;
import com.google.gson.Gson;
import com.squareup.okhttp.OkHttpClient;
import java.io.File;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.HttpResponseInterceptor;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(restAdapter_LogLevel0.log());
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 1798;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.httpExecutor, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = restAdapter0.getIDLE_THREAD_NAME();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(string0);
      assertEquals("Retrofit-Idle", string0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-67);
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[6] = byte4;
      byte byte5 = (byte)9;
      byte byte6 = (byte)74;
      byteArray0[8] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte) (-56), (byte)0, (byte) (-67), (byte)0, (byte) (-67), (byte)0, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(server1, server0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getapiUrl());
      assertNotNull(server1);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(errorHandler0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "dy}?]zfb2rvgWAW";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "XS_HnwVI+)yEH%mg";
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      restAdapter_Builder0.sethttpExecutor(forkJoinPool0);
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-126);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byte byte3 = (byte)5;
      byteArray0[0] = byte3;
      byteArray0[4] = byte3;
      byte byte4 = (byte)120;
      byteArray0[5] = byte4;
      byteArray0[6] = byteArray0[2];
      byte byte5 = (byte)9;
      byteArray0[5] = byte5;
      byte byte6 = (byte)74;
      byteArray0[8] = byte6;
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      restAdapter_Builder4.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      Server server1 = new Server(server0.DEFAULT_NAME, server0.apiUrl);
      assertFalse(server1.equals((Object)server0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("", server1.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(server1);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(executor0);
      
      restAdapter_Builder3.setclientProvider(restAdapter_Builder0.clientProvider);
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      
      int int0 = defaultHttpClient0.getResponseInterceptorCount();
      assertEquals(1, int0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(delayed0);
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter0.getconverter();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(gsonConverter0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[3] = byte0;
      byte byte3 = (byte) (-67);
      byteArray0[4] = byte3;
      byte byte4 = (byte)120;
      byteArray0[5] = byte4;
      byte byte5 = (byte)9;
      byteArray0[7] = byte5;
      byte byte6 = (byte)74;
      byteArray0[8] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte)0, (byte) (-60), (byte) (-67), (byte)120, (byte)0, (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      restAdapter0.setLogLevel(restAdapter_Builder1.logLevel);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(server1, server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getUrl());
      assertNotNull(server1);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(executor0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(delayed0);
      
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setclientProvider(client_Provider0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "Fk)HlmNnsPf+a#f";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder2.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter7();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      TypedString typedString0 = new TypedString(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      
      Class<Short> class0 = Short.TYPE;
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Object object0 = gsonConverter0.fromBody(typedString0, class0);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNull(object0);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNull(executor0);
      
      GsonConverter.JsonTypedOutput gsonConverter_JsonTypedOutput0 = (GsonConverter.JsonTypedOutput)gsonConverter0.toBody(httpClient0);
      assertNull(gsonConverter_JsonTypedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.getmimeType());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.mimeType());
      assertEquals(4L, gsonConverter_JsonTypedOutput0.length());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter_JsonTypedOutput0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter0.getLogLevel();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.log());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel2);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        Parcel.obtain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.os.Parcel", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      String string0 = "Error handler may not be null.";
      RestMethodInfo restMethodInfo0 = null;
      String string1 = "nV0( j";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      File file0 = null;
      TypedFile typedFile0 = null;
      try {
        typedFile0 = new TypedFile(string0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("retrofit.mime.TypedFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 0;
      Random.setNextRandom(int0);
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      String string1 = "Locale may not be null.";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-35);
      byteArray0[1] = byte1;
      byte byte2 = (byte)114;
      byteArray0[3] = byte2;
      byte byte3 = (byte)8;
      byteArray0[3] = byte3;
      TypedByteArray typedByteArray0 = new TypedByteArray(string0, byteArray0);
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-35), (byte)0, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("", typedByteArray0.mimeType());
      assertEquals(4L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertNotNull(typedByteArray0);
      
      Request request0 = new Request(string0, string1, arrayList0, typedByteArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-35), (byte)0, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("", typedByteArray0.mimeType());
      assertEquals(4L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals("Locale may not be null.", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "r<plI";
      EvoSuiteFile evoSuiteFile0 = null;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder2.errorHandler, restAdapter_Builder2.log, restAdapter_LogLevel1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      restAdapter_Builder1.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      int int0 = 2159;
      Random.setNextRandom(int0);
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter_Builder1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      long long0 = (-1748L);
      System.setCurrentTimeMillis(long0);
      int int0 = (-2568);
      Random.setNextRandom(int0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[28];
      byte byte0 = (byte) (-109);
      byteArray0[1] = byte0;
      byte byte1 = (byte) (-56);
      byteArray0[2] = byte1;
      byteArray0[3] = byteArray0[1];
      byte byte2 = (byte) (-67);
      byteArray0[4] = byte2;
      byte byte3 = (byte)120;
      byteArray0[5] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[6] = byte4;
      byte byte5 = (byte)9;
      byteArray0[7] = byte5;
      byte byte6 = (byte)74;
      byteArray0[8] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(28, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      String string1 = "TR\\Nr~";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      List<Header> list0 = null;
      TypedString typedString0 = new TypedString(server0.name);
      assertFalse(string0.equals((Object)string1));
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(typedString0);
      
      Request request0 = new Request(string1, restAdapter0.IDLE_THREAD_NAME, list0, typedString0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertEquals("TR\\Nr~", request0.getMethod());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(request1, request0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertEquals("TR\\Nr~", request0.getMethod());
      assertEquals("Retrofit-Idle", request1.getUrl());
      assertEquals("TR\\Nr~", request1.getMethod());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(request1);
      
      // Undeclared exception!
      try { 
        apacheClient0.execute(request1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target host must not be null, or set in parameters.
         //
         verifyException("org.apache.http.impl.client.DefaultRequestDirector", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int0 = 4;
      Random.setNextRandom(int0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = null;
      restAdapter_Log0.log(string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[3] = byte2;
      byteArray0[4] = byteArray0[3];
      byte byte3 = (byte)120;
      byteArray0[5] = byte3;
      byteArray0[6] = byteArray0[1];
      byte byte4 = (byte)9;
      byteArray0[7] = byte4;
      byteArray0[8] = byteArray0[2];
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      defaultHttpClient0.setCookieStore(basicCookieStore0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setConverter(restAdapter_Builder1.converter);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder5);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(server1.equals((Object)server0));
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(server1, server0);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(server1);
      
      String string2 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(string2);
      assertEquals("Retrofit-", string2);
      
      Executor executor0 = restAdapter_Builder1.getcallbackExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertNotNull(executor0);
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(profiler0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "K'gX'RJF^6hDo";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("K'gX'RJF^6hDo", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("K'gX'RJF^6hDo", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2417;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = null;
      boolean boolean0 = false;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("default", server0.getName());
      assertEquals("K'gX'RJF^6hDo", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("K'gX'RJF^6hDo", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("default", server0.getName());
      assertEquals("K'gX'RJF^6hDo", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("K'gX'RJF^6hDo", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(restAdapter_RestHandler0);
      
      Method method0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) restAdapter0;
      objectArray0[1] = (Object) string1;
      objectArray0[2] = (Object) forkJoinPool_ForkJoinWorkerThreadFactory0;
      try { 
        restAdapter_RestHandler0.invoke(string1, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      Random.setNextRandom(int0);
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      String string1 = "Locale may not be null.";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byte byte1 = (byte) (-35);
      byte byte2 = (byte)114;
      byte byte3 = (byte)8;
      byteArray0[3] = byte3;
      TypedByteArray typedByteArray0 = new TypedByteArray(string0, byteArray0);
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNull(typedByteArray0.fileName());
      assertEquals(4L, typedByteArray0.length());
      assertEquals("", typedByteArray0.mimeType());
      assertNotNull(typedByteArray0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int1 = 3787;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(byte3, int1, byte2, timeUnit0, linkedBlockingQueue0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertFalse(int1 == int0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte3);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertNotNull(threadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte3);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(int1 == int0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte3);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(int1 == int0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertNotNull(restAdapter_RestHandler0);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse4();
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response0, int1);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte3);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(int1 == int0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      assertNotNull(response1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "x";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel0);
      
      Server server0 = new Server(string0);
      assertEquals("x", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("x", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 16;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = null;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<HttpResponseInterceptor> profiler0 = (Profiler<HttpResponseInterceptor>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals("x", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("x", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals("x", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("x", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(requestInterceptor1);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertTrue(restAdapter_LogLevel0.log());
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 1798;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean0 = false;
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      long long0 = 0L;
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      System.setCurrentTimeMillis(long0);
      String string0 = forkJoinPool0.toString();
      assertNotNull(string0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder1.clientProvider, forkJoinPool0, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Server server0 = restAdapter0.getserver();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNull(server0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setErrorHandler(restAdapter_Builder0.errorHandler);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder4);
      
      Client.Provider client_Provider0 = restAdapter_Builder4.getclientProvider();
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(client_Provider0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      int int0 = 4;
      Random.setNextRandom(int0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.LogLevel restAdapter_LogLevel1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setLogLevel(restAdapter_LogLevel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "_ue<6$";
      Server server0 = new Server(string0);
      assertEquals("_ue<6$", server0.getUrl());
      assertEquals("_ue<6$", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("_ue<6$", server0.getUrl());
      assertEquals("_ue<6$", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setLog(restAdapter_Builder2.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = null;
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      restAdapter_Builder0.sethttpExecutor(forkJoinPool0);
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(executor0, forkJoinPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter_Builder1.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter_Builder1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      Executor executor0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      restAdapter_Builder0.sethttpExecutor(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      int int0 = (-2195);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter_Builder0.setcallbackExecutor(scheduledThreadPoolExecutor0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      restAdapter_Builder1.setclientProvider(restAdapter_Builder2.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string0 = "Fk)HlmNnsPf+a#f";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder2.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        Parcel.obtain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.os.Parcel", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setclientProvider(client_Provider0);
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.httpExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setErrorHandler(restAdapter_Builder1.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 53;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = null;
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      AndroidLog androidLog0 = new AndroidLog(server0.DEFAULT_NAME);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertNotNull(androidLog0);
      
      String string0 = "TY#8dsB-FQST^himU4-";
      gsonConverter0.setencoding(string0);
      assertEquals("TY#8dsB-FQST^himU4-", gsonConverter0.getencoding());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("TY#8dsB-FQST^himU4-", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<TypedByteArray> class0 = TypedByteArray.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "Response2.xml";
      restAdapter_Log0.log(string0);
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 1798;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean0 = false;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Converter converter0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "Rka";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("Rka", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Rka", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client_Provider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter0.getLogLevel();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(restAdapter_LogLevel2.log());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel2);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      Executor executor0 = restAdapter_Builder1.getcallbackExecutor();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNull(executor0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      int int0 = 300;
      int int1 = 2002;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      assertNotNull(synchronousQueue0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int1, int0, timeUnit0, synchronousQueue0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(threadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(threadPoolExecutor0, restAdapter_Builder0.httpExecutor);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string0 = "HEADERS";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.valueOf(string0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.log());
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string1 = "TrJ[R9";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TrJ[R9", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-64);
      byteArray0[1] = byte1;
      TypedByteArray typedByteArray0 = new TypedByteArray(string0, byteArray0);
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNull(typedByteArray0.fileName());
      assertEquals("HEADERS", typedByteArray0.mimeType());
      assertEquals(2L, typedByteArray0.length());
      assertNotNull(typedByteArray0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      try { 
        gsonConverter0.fromBody(typedByteArray0, class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expecting character, got: \u0000\uFFFD
         //
         verifyException("retrofit.converter.GsonConverter", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(server0.DEFAULT_NAME);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(androidLog0);
      
      String string0 = "/<6";
      String string1 = "";
      requestInterceptorTape0.addEncodedPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, forkJoinPool0, requestInterceptorTape0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int1 = 0;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(int1, threadPoolExecutor_CallerRunsPolicy0);
      assertFalse(scheduledThreadPoolExecutor1.equals((Object)scheduledThreadPoolExecutor0));
      assertNotNull(scheduledThreadPoolExecutor1);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertFalse(scheduledThreadPoolExecutor1.equals((Object)scheduledThreadPoolExecutor0));
      assertFalse(scheduledThreadPoolExecutor0.equals((Object)scheduledThreadPoolExecutor1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(scheduledThreadPoolExecutor1, scheduledThreadPoolExecutor0);
      assertNotSame(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(scheduledThreadPoolExecutor0.equals((Object)scheduledThreadPoolExecutor1));
      assertFalse(scheduledThreadPoolExecutor1.equals((Object)scheduledThreadPoolExecutor0));
      assertNotSame(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(scheduledThreadPoolExecutor1, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setErrorHandler(restAdapter0.errorHandler);
      assertFalse(scheduledThreadPoolExecutor0.equals((Object)scheduledThreadPoolExecutor1));
      assertFalse(scheduledThreadPoolExecutor1.equals((Object)scheduledThreadPoolExecutor0));
      assertNotSame(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(scheduledThreadPoolExecutor1, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setExecutors(restAdapter_Builder0.callbackExecutor, scheduledThreadPoolExecutor0);
      assertFalse(scheduledThreadPoolExecutor0.equals((Object)scheduledThreadPoolExecutor1));
      assertFalse(scheduledThreadPoolExecutor1.equals((Object)scheduledThreadPoolExecutor0));
      assertNotSame(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(scheduledThreadPoolExecutor1, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder4);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      
      RestMethodInfo restMethodInfo0 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = "r  d*+";
      String string1 = "XD9)*7";
      File file0 = MockFile.createTempFile(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("XD9)*70r  d*+", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XD9)*70r  d*+", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      TypedFile typedFile0 = new TypedFile(string0, file0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("XD9)*70r  d*+", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XD9)*70r  d*+", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, typedFile0.length());
      assertEquals("XD9)*70r  d*+", typedFile0.fileName());
      assertEquals("r  d*+", typedFile0.mimeType());
      assertNotNull(typedFile0);
      
      Request request0 = new Request(server0.apiUrl, server0.DEFAULT_NAME, arrayList0, typedFile0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("XD9)*70r  d*+", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XD9)*70r  d*+", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals(0L, typedFile0.length());
      assertEquals("XD9)*70r  d*+", typedFile0.fileName());
      assertEquals("r  d*+", typedFile0.mimeType());
      assertEquals("http://example.com", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-67);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      byte byte8 = (byte)74;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte) (-56), (byte)5, (byte) (-67), (byte)120, (byte) (-67), (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(server1, server0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(server1);
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(client_Provider0);
      
      String string2 = "wq";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setServer(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder5);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = null;
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      String string1 = "";
      List<Header> list0 = null;
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNotNull(formUrlEncodedTypedOutput0);
      
      String string2 = "";
      String string3 = "S=Y)r:n0i";
      Server server0 = new Server(string2, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("S=Y)r:n0i", server0.getName());
      assertNotNull(server0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("S=Y)r:n0i", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("S=Y)r:n0i", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(client_Provider0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray1 = RestAdapter.LogLevel.values();
      assertFalse(restAdapter_LogLevelArray1.equals((Object)restAdapter_LogLevelArray0));
      assertNotSame(restAdapter_LogLevelArray1, restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray1.length);
      assertNotNull(restAdapter_LogLevelArray1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 1798;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      Client.Provider client_Provider0 = restAdapter_Builder3.getclientProvider();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(client_Provider0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-67);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      byte byte8 = (byte)74;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte) (-56), (byte)5, (byte) (-67), (byte)120, (byte) (-67), (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter_Builder3.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(server1, server0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(server1);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(executor0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(executor1);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "]7BuXTXpr3G~YC0i+";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getUrl());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "CyK?G`?rk";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getUrl());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertNotSame(string1, string0);
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getUrl());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(executor0);
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(server1, server0);
      assertNotSame(string0, string1);
      assertSame(server0, server1);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertNotSame(string1, string0);
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getName());
      assertEquals("]7BuXTXpr3G~YC0i+", server1.getapiUrl());
      assertEquals("]7BuXTXpr3G~YC0i+", server1.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getUrl());
      assertEquals("]7BuXTXpr3G~YC0i+", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(server1);
      
      // Undeclared exception!
      try { 
        androidLog0.log(server0.name);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      Executor executor1 = restAdapter0.getcallbackExecutor();
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(executor1);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-67);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      byte byte8 = (byte)74;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte)0, (byte)5, (byte) (-67), (byte)120, (byte) (-67), (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      defaultHttpClient0.setCookieStore(basicCookieStore0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(server1, server0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(server1);
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter0.getconverter();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(gsonConverter0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-67);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      byte byte8 = (byte)74;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte) (-56), (byte)5, (byte) (-67), (byte)120, (byte) (-67), (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      defaultHttpClient0.setCookieStore(basicCookieStore0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(server1, server0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(server1);
      
      String string2 = restAdapter0.getIDLE_THREAD_NAME();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(string2);
      assertEquals("Retrofit-Idle", string2);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertNotNull(okClient0);
      
      Server server0 = new Server(string0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, linkedBlockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(restAdapter_RestHandler0);
      
      Map<Method, RestMethodInfo> map0 = restAdapter_RestHandler0.getmethodDetailsCache();
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(map0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-67);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      byte byte8 = (byte)74;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte) (-56), (byte)5, (byte) (-67), (byte)120, (byte) (-67), (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      defaultHttpClient0.setCookieStore(basicCookieStore0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(server1, server0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(server1);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(errorHandler0);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byteArray0[3] = byte2;
      byteArray0[4] = byteArray0[3];
      byte byte3 = (byte)120;
      byteArray0[5] = byte3;
      byteArray0[6] = byteArray0[1];
      byte byte4 = (byte)9;
      byteArray0[7] = byte4;
      byteArray0[8] = byteArray0[2];
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      defaultHttpClient0.setCookieStore(basicCookieStore0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(server1.equals((Object)server0));
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(server1, server0);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(server1);
      
      String string2 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(string2);
      assertEquals("Retrofit-", string2);
      
      Executor executor0 = restAdapter_Builder1.getcallbackExecutor();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertNotNull(executor0);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      Server server0 = null;
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNull(executor0);
      
      String string0 = "/wg})";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel./wg})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-67);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      byte byte8 = (byte)74;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte) (-56), (byte)5, (byte) (-67), (byte)120, (byte) (-67), (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      defaultHttpClient0.setCookieStore(basicCookieStore0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      restAdapter0.logException(mockIOException0, server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(server1, server0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server1.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(server1);
      
      Executor executor0 = restAdapter_Builder3.gethttpExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(executor0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "XS_HnwVI+)yEH%mg";
      Server server0 = new Server(string0);
      assertEquals("XS_HnwVI+)yEH%mg", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("XS_HnwVI+)yEH%mg", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      String string1 = "rL";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("XS_HnwVI+)yEH%mg", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("XS_HnwVI+)yEH%mg", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertNotSame(string1, string0);
      assertSame(requestInterceptor1, requestInterceptor0);
      assertEquals("XS_HnwVI+)yEH%mg", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("XS_HnwVI+)yEH%mg", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(requestInterceptor1);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      Server server0 = null;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string1 = "~VWwH->T\\v4bT~A@";
      String string2 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNotNull(multipartTypedOutput0);
      
      Request request0 = new Request(string1, string2, arrayList0, multipartTypedOutput0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("", request0.getUrl());
      assertEquals("~VWwH->T\\v4bT~A@", request0.getMethod());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byteArray0[6] = byteArray0[2];
      byte byte6 = (byte)9;
      byteArray0[7] = byte6;
      byte byte7 = (byte)74;
      byteArray0[8] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte)0, (byte)5, (byte) (-67), (byte)120, (byte)0, (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter_Builder3.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(string1);
      assertEquals("Retrofit-", string1);
      
      MockIOException mockIOException0 = new MockIOException(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      Server server1 = restAdapter0.getserver();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server1.equals((Object)server0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertNotSame(server1, server0);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server1.getapiUrl());
      assertEquals("default", server1.getName());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(server1);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(executor0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(delayed0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      restAdapter_Builder1.setclientProvider(restAdapter_Builder2.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = "Fk)HlmNnsPf+a#f";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder2.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockThrowable0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 0;
      Random.setNextRandom(int0);
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      String string1 = "Locale may not be null.";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-35);
      byteArray0[1] = byte1;
      byte byte2 = (byte)114;
      byteArray0[2] = byte2;
      byte byte3 = (byte)8;
      byteArray0[3] = byte3;
      TypedByteArray typedByteArray0 = new TypedByteArray(string0, byteArray0);
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-35), (byte)114, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4L, typedByteArray0.length());
      assertEquals("", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertNotNull(typedByteArray0);
      
      Request request0 = new Request(string0, string1, arrayList0, typedByteArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-35), (byte)114, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4L, typedByteArray0.length());
      assertEquals("", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("Locale may not be null.", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-56);
      byteArray0[2] = byte2;
      byte byte3 = (byte)5;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte)120;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-67);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      byte byte8 = (byte)74;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-109), (byte) (-56), (byte)5, (byte) (-67), (byte)120, (byte) (-67), (byte)9, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      String string1 = "TR\\Nr~";
      List<Header> list0 = null;
      TypedString typedString0 = new TypedString(server0.name);
      assertFalse(string0.equals((Object)string1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(typedString0);
      
      Request request0 = new Request(string1, restAdapter0.IDLE_THREAD_NAME, list0, typedString0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("TR\\Nr~", request0.getMethod());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(request1, request0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("TR\\Nr~", request0.getMethod());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertEquals("Retrofit-Idle", request1.getUrl());
      assertEquals("TR\\Nr~", request1.getMethod());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(request1);
      
      // Undeclared exception!
      try { 
        apacheClient0.execute(request1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target host must not be null, or set in parameters.
         //
         verifyException("org.apache.http.impl.client.DefaultRequestDirector", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "TI";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder1);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(profiler0).toString();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(restAdapter_Builder2.server);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(profiler1);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "Fk)HlmNnsPf+a#f";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder2.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter7();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      TypedString typedString0 = new TypedString(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Object object0 = gsonConverter0.fromBody(typedString0, class0);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNull(object0);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(executor0);
      
      GsonConverter.JsonTypedOutput gsonConverter_JsonTypedOutput0 = (GsonConverter.JsonTypedOutput)gsonConverter0.toBody(httpClient0);
      assertEquals(4L, gsonConverter_JsonTypedOutput0.length());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.mimeType());
      assertNull(gsonConverter_JsonTypedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.getmimeType());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter_JsonTypedOutput0);
      
      Request request0 = new Request(string1, string2, arrayList0, gsonConverter_JsonTypedOutput0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4L, gsonConverter_JsonTypedOutput0.length());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.mimeType());
      assertNull(gsonConverter_JsonTypedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.getmimeType());
      assertEquals("", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "Fk)HlmNnsPf+a#f";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder2.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "";
      restAdapter_Builder2.sethttpExecutor(restAdapter_Builder1.callbackExecutor);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TypedString typedString0 = new TypedString(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertNotNull(typedString0);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(executor0);
      
      String string3 = "";
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(errorHandler0);
      
      // Undeclared exception!
      try { 
        Parcel.obtain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.os.Parcel", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "TI";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder1);
      
      String string1 = "WGDOqFXl&4LcQ";
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder3);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string2 = "\\n";
      Response response0 = null;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string2, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setclientProvider(client_Provider0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "Fk)HlmNnsPf+a#f";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder2.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter7();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      TypedString typedString0 = new TypedString(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      
      InputStream inputStream0 = typedString0.in();
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0, inputStream0.available());
      assertNotNull(inputStream0);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Object object0 = gsonConverter0.fromBody(typedString0, class0);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNull(object0);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(executor0);
      
      GsonConverter.JsonTypedOutput gsonConverter_JsonTypedOutput0 = (GsonConverter.JsonTypedOutput)gsonConverter0.toBody(httpClient0);
      assertEquals(4L, gsonConverter_JsonTypedOutput0.length());
      assertNull(gsonConverter_JsonTypedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.mimeType());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.getmimeType());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter_JsonTypedOutput0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter0.getLogLevel();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.log());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel2);
      
      Request request0 = new Request(string1, string2, arrayList0, gsonConverter_JsonTypedOutput0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4L, gsonConverter_JsonTypedOutput0.length());
      assertNull(gsonConverter_JsonTypedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.mimeType());
      assertEquals("application/json; charset=UTF-8", gsonConverter_JsonTypedOutput0.getmimeType());
      assertEquals("", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(request0);
      
      Converter converter0 = restAdapter0.getconverter();
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(converter0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "TI";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder1.serializedObjectSupporter = restAdapter_Builder0.serializedObjectSupporter;
      assertEquals("TI", gsonConverter0.getencoding());
      
      String string1 = "WGDOqFXl&4LcQ";
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder1.sethttpExecutor(restAdapter_Builder0.callbackExecutor);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("TI", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder3);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string2 = "\\n";
      Response response0 = null;
      long long0 = 0L;
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter_Builder0.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.name);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder2);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[28];
      byte byte0 = (byte) (-109);
      byteArray0[1] = byte0;
      byte byte1 = (byte) (-56);
      byteArray0[2] = byte1;
      byteArray0[3] = byteArray0[1];
      byte byte2 = (byte) (-67);
      byteArray0[4] = byte2;
      byte byte3 = (byte)120;
      byteArray0[5] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[6] = byte4;
      byte byte5 = (byte)9;
      byteArray0[7] = byte5;
      byte byte6 = (byte)74;
      byteArray0[8] = byte6;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      BasicCookieStore basicCookieStore0 = new BasicCookieStore();
      assertNotNull(basicCookieStore0);
      
      String string1 = "TR\\Nr~";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      List<Header> list0 = null;
      TypedString typedString0 = new TypedString(server0.name);
      assertFalse(string0.equals((Object)string1));
      assertNull(typedString0.fileName());
      assertEquals(7L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(typedString0);
      
      Request request0 = new Request(string1, restAdapter0.IDLE_THREAD_NAME, list0, typedString0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(typedString0.fileName());
      assertEquals(7L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("TR\\Nr~", request0.getMethod());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(request1, request0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertNull(typedString0.fileName());
      assertEquals(7L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("TR\\Nr~", request0.getMethod());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertEquals("Retrofit-Idle", request1.getUrl());
      assertEquals("TR\\Nr~", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(request1);
      
      // Undeclared exception!
      try { 
        apacheClient0.execute(request1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target host must not be null, or set in parameters.
         //
         verifyException("org.apache.http.impl.client.DefaultRequestDirector", e);
      }
  }
}
